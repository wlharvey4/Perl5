%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%          DO NOT EDIT THIS FILE!!!!           %
% It was created by jrweave from `Perl5.twjr'. %
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\input texinfo   @c -*- mode: texinfo -*-

@c FILE    Perl5.twjr
@c VERSION 0.2.1
@c DATE    2018-11-13T17:40
@c AUTHOR  wlharvey4

@c *****************************************************************************
@c %**start of header

@setfilename  Perl5.info
@settitle     All About Perl5

@c %**end of header

@c Extra indices added by jrweave
@defindex cd   @c chunk definition
@defindex cr   @c chunk reference
@c *****************************************************************************

@c -----------------------------------------------------------------------------
@set TITLE      All About Perl5
@set SHORTTITLE Perl5
@set AUTHOR WLHarvery4
@set EDITION 0.1
@set UPDATE-MONTH NOVEMBER, 2018 @c goes in the subtitle
@set COPYRIGHT-YEAR 2018
@set COPYRIGHT-HOLDER WLHarvey4
@set ADDRESS1 Address Line 1
@set ADDRESS2 Address Line 2
@c -----------------------------------------------------------------------------








@c *****************************************************************************
@c BIBCITE MACROS
@c *****************************************************************************

@c need to load macros before header
@macro mybibsetrefnode{node}
@set mybibrefnode \node\
@end macro

@macro mybibnode{}
@value{mybibrefnode}
@end macro

@macro mybibusetable{node}
@set mybibtable true
@ifset mybiblist
@clear mybiblist
@end ifset
@mybibsetrefnode{\node\}
@end macro

@macro mybibuselist{node}
@set mybiblist true
@ifset mybibtable
@clear mybibtable
@end ifset
@mybibsetrefnode{\node\}
@end macro

@macro mybibcite{ref}
@inlineifclear{mybibrefnode, @mybibmakeref{mybibsetrefnode was not used, \ref\}}
@ifset mybibrefnode
@mybibmakeref{@mybibnode{}, \ref\}
@end ifset

@end macro

@macro mybibmakeref{node, ref}
(See item @cite{\ref\} in @ref{\ref\,,\node\}.)
@end macro

@macro mybibitem{ref}
@ifclear mybiblist
@ifclear mybibtable
@set mybiblist true
@end ifclear
@end ifclear

@ifset mybiblist
@item
@anchor{\ref\}[\ref\]
@end ifset

@ifset mybibtable
@item @anchor{\ref\}\ref\ ---
@end ifset

@end macro

@mybibusetable{Bibliography}

@c /////////////////////////////////////////////////////////////////////////////








@c *****************************************************************************
@c FINALOUT / DRAFT / FORPRINT
@c *****************************************************************************

@set      DRAFT @i{DRAFT} @c when set, print DRAFT in heading
@c @clear DRAFT  @c when clear, don't print DRAFT in heading
@clear  FINALOUT @c when clear, show black boxes for overfull lines
@c @set FINALOUT @c when set, don't show black boxes for overfull lines
@clear  FORPRINT @c when clear, PDF output is for viewing, not printing
@c @set FORPRINT @c when set, PDF output is for printing, not viewing

@c -----------------------------------------------------------------------------
@ifclear FORPRINT
@tex
\gdef\linkcolor{0.5 0.09 0.12}
@end tex
@tex
\gdef\urlcolor{0.5 0.09 0.12}
@end tex
@tex
\global\urefurlonlylinktrue
@end tex
@end ifclear

@iftex
@ifset FINALOUT @c don't show black boxes for final printout
@finalout
@end ifset
@end iftex

@c Uncomment this for the release.  Leaving it off saves paper
@c during editing and review.
@ifset FORPRINT
@ifset FINALOUT
@c @setchapternewpage odd
@end ifset
@end ifset

@c -----------------------------------------------------------------------------








@c *****************************************************************************
@c SECTIONING / INDICES
@c *****************************************************************************

@iftex
@set DOCUMENT book
@set CHAPTER chapter
@set APPENDIX appendix
@set SECTION section
@set SUBSECTION subsection
@end iftex
@ifhtml
@set DOCUMENT Web page
@set CHAPTER chapter
@set APPENDIX appendix
@set SECTION section
@set SUBSECTION subsection
@end ifhtml
@ifinfo
@set DOCUMENT Info file
@set CHAPTER major node
@set APPENDIX major node
@set SECTION minor node
@set SUBSECTION node
@end ifinfo
@ifdocbook
@set DOCUMENT book
@set CHAPTER chapter
@set APPENDIX appendix
@set SECTION section
@set SUBSECTION subsection
@end ifdocbook


@c merge the function and variable indexes into the concept index
@c do so without the code font, and in the index entries do the
@c font management ourselves.  Also merge in the chunk definition
@c and reference entries, which jrweave creates for us.
@ifnothtml
@synindex fn cp
@synindex vr cp
@synindex cd cp
@synindex cr cp
@end ifnothtml

@c /////////////////////////////////////////////////////////////////////////////








@c *****************************************************************************
@c SPECIAL TEXIWEBJR COMMANDS
@c *****************************************************************************

@c Change how xref titles are quoted.
@tex
\gdef\xrefprintnodename#1{``#1''}
@end tex
@c And let braces in index entries work.
@tex
\global\usebracesinindexestrue
@end tex

@c some special symbols
@ifnottex
@macro ii{text}
@i{\text\}
@end macro
@end ifnottex


@c -----------------------------------------------------------------------------
@c INITIAL_SETUP
@c -----------------------------------------------------------------------------

@c The initial_setup code runs as a script in a BEGIN section of AWK during the
@c tangling  phase before  any files  are  extracted. Here  create a  directory
@c structure for project  files, plus any other initialization  that might need
@c to be done. Files are moved into directories in a @post_create command.

@c <------------------------------------->


@c END Special TexiwebJr Commands
@c /////////////////////////////////////////////////////////////////////////////








@c %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
@c BEGIN PRINTED MATTER
@c --COPYING
@c --FRONT MATTER
@c   **TITLE PAGES
@c     ..Short Title
@c     ..Title Page
@c     ..Copyright Page
@c --MAIN MATTER
@c   **Top
@c     --- unpaginated ---
@c     ..General Introduction
@c     ..Menus
@c     ..Table of Contents
@c     --- paginated --- unnumbered ---
@c     ..Front Matter
@c       ~~Forward
@c       ~~Preface
@c     --- paginated --- numbered ---
@c     ..Main Matter
@c       ~~Chapters
@c         >>Sections
@c           ^^Subsections
@c             ##Subsubsections
@c     --- paginated --- lettered ---
@c       ~~Appendices
@c --BACK MATTER
@c   --- paginated --- unnumbered ---
@c   **Lists (Unnumbered)
@c     ..Bibliography
@c     ..Tables
@c     ..Indices
@c %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%








@c %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
@c BEGIN COPYING
@c %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


@copying

@c <------------------------------------->
@docbook
<para>Published by:</para>

<literallayout class="normal">Full Name
Address Line 1
Address Line 2
etc.
Email: <email>user@@example.com</email>
URL: <ulink url="http://www.example.com/">http://www.example.com/</ulink></literallayout>

<literallayout class="normal">Copyright &copy; YYYY, YYYY
Full name here
All Rights Reserved.</literallayout>
@end docbook
@c <------------------------------------->


@c <------------------------------------->
@ifnotdocbook
Copyright @copyright{} @value{COPYRIGHT-YEAR} @*
@value{AUTHOR} @*
All Rights Reserved.
@end ifnotdocbook
@c <------------------------------------->


@sp 1
@value{TITLE} is copyright @value{COPYRIGHT-YEAR}
@copyright{} by @value{AUTHOR}. It is published under the conditions of the GNU
General Public License, version 3.
@sp 2
This is Edition @value{EDITION} of @cite{@value{TITLE}}.


@end copying
@c /////////////////////////////////////////////////////////////////////////////








@c %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
@c BEGIN TITLEPAGE
@c %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


@c Let texinfo.tex give us full section titles
@xrefautomaticsectiontitle on

@c Start extra commands added by jrweave

@c For HTML, spell out email addresses, to avoid problems with
@c address harvesters for spammers.
@ifhtml
@macro EMAIL{real,spelled}
``\spelled\''
@end macro
@end ifhtml
@ifnothtml
@macro EMAIL{real,spelled}
@email{\real\}
@end macro
@end ifnothtml

@macro FIXME{text}
@strong{FIXME}: \text\
@end macro

@macro oldnum{value}
\value\
@end macro

@tex
\gdef\oldnum#1{\begingroup\oldstyle #1\endgroup}%
@end tex

@c End extra commands added by jrweave

@titlepage

@c Uncomment this if it's ever printed as a real book(let).
@c @shorttitlepage @value{SHORTTITLE}

@title @value{TITLE}
@subtitle @value{UPDATE-MONTH}
@author @value{AUTHOR} @c Full Name here

@ifnotdocbook
@c Include the Distribution inside the titlepage environment so
@c that headings are turned off.  Headings on and off do not work.

@page
@vskip 0pt plus 1filll
Published by:
@sp 1
@value{AUTHOR} @*
@value{ADDRESS1} @*
@value{ADDRESS2} @*
@* @c etc.
Email: @EMAIL{user@@example.com,user AT example.com} @*
URL: @url{http://www.example.com/} @*

@insertcopying
@end ifnotdocbook
@c <------------------------------------->


@end titlepage
@c /////////////////////////////////////////////////////////////////////////////








@c =============================================================================
@c HEADINGS SETTINGS
@c =============================================================================

@iftex
@headings off
@evenheading @thispage @| @value{DRAFT} @| @strong{@value{SHORTTITLE}}
@oddheading  @strong{@thischapter} @| @value{DRAFT} @| @thispage
@end iftex

@c /////////////////////////////////////////////////////////////////////////////








@c %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
@c BEGIN TOP
@c --General Introduction
@c --Main Menu
@c --Table of Contents
@c %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%








@ifnottex
@ifnotdocbook
@ifnotxml

@c =============================================================================
@node Top, Preface, (dir), (dir)
@top Top of the Perl
@c =============================================================================

This file documents @value{TITLE}.

@insertcopying
@end ifnotxml
@end ifnotdocbook
@end ifnottex




@c -----------------------------------------------------------------------------
@c                                  MENU & TOC

@c <------------------------------------->
@c                 MENU

@menu
* Preface::
* Introduction::
* Perlbrew::
* About Packages::
* The Makefile::
* Code Chunk Summaries::
* Bibliography::
* List of Tables::
* Concept Index::

@detailmenu
 --- The Detailed Node Listing ---

Preface

* Audience::                    Who should read this @value{DOCUMENT}.
* Overview::                    An overview of the @value{DOCUMENT}.
* Conventions::                 Typographical conventions.
* Acknowledgements::            Acknowledgements.

What Is Covered

* The Readme::

About

* Install Perlbrew::
* Using Perlbrew::
* Perlbrew Articles::

Perlbrew Directory Structure

* Perlbrew Install Shell Script::

Perlbrew Articles

* Multiple Perl 5 Installations::

About This Article

* Installing Perlbrew::
* Project Web Site::
* Getting To Know Perlbrew::
* Installing Perl 5::
* Managing Perl 5 Installations::
* Managing Modules::

About Packages

* Common Perl Code::
* Strict Warnings File-Spec Basename Lib::
* About File-Slurp::

Where is @file{File::Slurp}

* File-Slurp Manifest::
* File-Slurp Code::
* File-Slurp Tests::
* Test FileSlurpTest::
* FileSlurpTestOverride Code::
* Test 00-report-prereqs.dd::
* Test 00-report-prereqs.t::
* Test 01-error_edit_file.t::
* 01-error_edit_file_lines.t Test::
* 01-error_prepend_file.t Test::
* edit_file.t Test::

@file{File::Slurp} Code

* Package File-Slurp::
* Package File-Slurp Perldoc::

Test FileSlurpTest

* FileSlurpTest Code Body::

Test @file{t/00-report-prereqs.dd}

* 00-report-prereqs.dd Body::

Test@file{00-report-prereqs.t}

* 00-report-prereqs.t Body::

Test @file{01-error_edit_file.t}

* 01-error_edit_file.t Body::
* 01-error_edit_file.t---Body--Use::
* 01-error_edit_file.t---Body--Plan Tests::
* 01-error_edit_file.t---Body--Edit File Error::
* 01-error_edit_file.t---Body--# of Error::

@file{01-error_prepend_file.t} Test

* 01-error_prepend_file.t---Body Code::
* 01-error_prepend_file.t---Body--Use Code::
* 01-error_prepend_file.t---Body--Test-More Code::
* 01-error_prepend_file.t---Body--Warnings Off Code::
* 01-error_prepend_file.t---Body--Tests Code::
* 01-error_prepend_file.t---Step 1 Code::
* 01-error_prepend_file.t---Step 2 Code::
* 01-error_prepend_file.t---Step 3 Code::

@file{edit_file.t} Test

* edit_file.t---Use::
* edit_file.t---PRE::
* edit_file.t---Body--Test 1::

The Makefile

* Makefile Variable Definitions::
* Makefile Default Target::
* Makefile TWJR Targets::
* Makefile Clean Targets::
* Makefile Applications::
* Makefile Syntax Checks::

Code Chunk Summaries

* File Definitions::            Source files by definition.
* Code Chunk Definitions::      Code chunks by definition.
* Code Chunk References::       Code chunks by reference.

@end detailmenu
@end menu

@c <------------------------------------->




@c <------------------------------------->
@c                 TOC

@c @summarycontents
@contents
@c <------------------------------------->


@c -----------------------------------------------------------------------------


@c END Menu & TOC
@c /////////////////////////////////////////////////////////////////////////////






@c <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
@part Front Matter
@c <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>






@c %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
@c BEGIN FRONT-MATTER
@c --Forward
@c --Preface
@c %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%








@c *****************************************************************************
@c                                  FORWARD

@c @node Foreword
@c @unnumbered Foreword


@c END Forward
@c /////////////////////////////////////////////////////////////////////////////








@c *****************************************************************************
@c                                  PREFACE

@c %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
@c BEGIN Preface
@c --Audience
@c --Overviw
@c --Conventions
@c --Acknowledgements
@c %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

@node Preface, Introduction, Top, Top
@unnumbered Preface

Text here.

@menu
* Audience::                    Who should read this @value{DOCUMENT}.
* Overview::                    An overview of the @value{DOCUMENT}.
* Conventions::                 Typographical conventions.
* Acknowledgements::            Acknowledgements.
@end menu




@c -----------------------------------------------------------------------------

@node Audience, Overview, Preface, Preface
@unnumberedsec Intended Audience

Audience text here.




@c -----------------------------------------------------------------------------

@node Overview, Conventions, Audience, Preface
@unnumberedsec What Is Covered

Overview text and chapter by chapter description here.


@c .....................................

@menu
* The Readme::
@end menu

@node The Readme,  , Overview, Overview
@unnumberedsubsec The Readme
@cindex readme

@need 400
@anchor{README-md}
@cdindex @r{@{@file{README.md}@}}, definition
@noindent
@r{@{@file{README.md}@}} @equiv{}
@example
# About the Perl5 TWJR Source File

## About This Source File

This document (`Perl5.twjr`) is a *literate* source document. It is designed to
produce an `Info` file (best read from within Emacs, but there is a stand-alone
Info reader  that can be used),  a `Pdf` document (generated  from LaTeX source
code by PDFTeX), an `HTML` web  site, `Docbook` source code, an `XML` document,
and a plain  text document. In addition.  it also produces working  code in any
language (so long as your system  contains the infrastructure to run the code).
For example,  this `README` file  was drafted  within this source  document and
extracted  as a  separate file,  as was  also the  `Makefile`. This  *literate*
document's features are targeted via a custom `Makefile` that is also a part of
this document, and  extracted as a separate  file, and is dynamic  in the sense
that if you  update it, you can produce  a new version with a simple  call to a
`make` target.  It is  designed to  be able  to produce  any number  of working
software  packages  of  any  language  contained at  any  number  of  different
locations on your system, all with  a single or, alternatively, multiple `make`
calls, depending on the granularity you need.

The Github  repository contains this  source document,  a Makefile that  can be
used  to work  with the  project, as  well as  a `Texinfo`  file that  has been
generated from  this `Twjr` file,  this README,  and a `.gitignore`  file. Most
computer systems have or can easily get the `make`, and `texinfo` programs that
are needed to  process the `Texinfo` file into the  various end documents, such
as `Info`,  `Pdf`, `HTML`, etc. Your  system will need, in  addition to `make`,
and `texinfo`, Gnu  AWK (`gawk`), and TexiwebJr to make  changes to this source
document and  process it  into a  `Texinfo` file and  extract its  programs and
files.  Your system  should also  have  the equivalent  of Bash  version 4,  as
version 4  has some parameter capabilities  that earlier versions do  not. Note
that most  versions of Mac OS  have version 3  of Bash installed as  a default.
Version 4 can be added using Homebrew or MacPorts very easily. In the past, Mac
OS has  also shipped with a  version of `texinfo`  that is below 6.5.  You will
also need to update `texinfo` to at least 6.5 if that is the case.

## How It Works

## Resources

* [TexiwebJr](https://github.com/arnoldrobbins/texiwebjr)
* [Texinfo](https://www.gnu.org/software/texinfo/)
* [Gnu AWK (gawk)](https://www.gnu.org/software/gawk/)
* [Gnu Bash](https://www.gnu.org/software/bash/)
* [TeX Live](https://www.tug.org/texlive/)

@end example
@iftex
@smallfonts @rm
@end iftex
@iftex
@textfonts @rm
@end iftex




@c -----------------------------------------------------------------------------

@node Conventions, Acknowledgements, Overview, Preface
@unnumberedsec Typographical Conventions

@c Copied mostly verbatim from the gawk manual.

@cindex Texinfo document formatting language
This @value{DOCUMENT} is written in an enhanced version of
@uref{http://www.gnu.org/software/texinfo/, Texinfo},
the GNU documentation formatting language.
A single Texinfo source file is used to produce both the printed and online
versions of a program's documentation.
@ifnotinfo
Because of this, the typographical conventions
are slightly different than in other books you may have read.
@end ifnotinfo

Examples you would type at the command-line are preceded by the common
shell primary and secondary prompts, @samp{$} and @samp{>}.  Input that
you type is shown @kbd{like this}.  Output from the command is preceded
by the glyph ``@print{}''.  This typically represents the command's
standard output.  Error messages, and other output on the command's
standard error, are preceded by the glyph ``@error{}''.  For example:

@example
$ @kbd{echo hi on stdout}
@print{} hi on stdout
$ @kbd{echo hello on stderr 1>&2}
@error{} hello on stderr
@end example

@ifnotinfo
In the text, command names appear in @code{this font}, while code segments
appear in the same font and quoted, @samp{like this}.  Options look
like this: @option{-f}.  Some things are emphasized @emph{like this},
and if a point needs to be made strongly, it is done @strong{like this}.
The first occurrence of a new term is usually its @dfn{definition} and
appears in the same font as the previous occurrence of ``definition''
in this sentence.  Finally, file names are indicated like this:
@file{/path/to/our/file}.
@end ifnotinfo




@c -----------------------------------------------------------------------------
@node Acknowledgements,  , Conventions, Preface
@unnumberedsec Acknowledgements

Acknowledgements go here.


@c END Preface
@c /////////////////////////////////////////////////////////////////////////////








@c %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
@c BEGIN CHAPTERS
@c --Introduction
@c --Chapters 1-1
@c %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


@c *****************************************************************************
@c                          CHAPTER: Introduction

@node Introduction, Perlbrew, Preface, Top
@chapter Introduction

@url{http://www.perl.org/, Perl 5 Official Website}


@c END CHAPTER Introduction
@c /////////////////////////////////////////////////////////////////////////////






@c <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
@part Part I
@c <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>






@c *****************************************************************************
@c	 	             CHAPTER: Perlbrew

@node Perlbrew, About Packages, Introduction, Top
@chapter PerlBrew
@cindex perlbrew

@url{https://perlbrew.pl/, Perlbrew Home}

@noindent
@url{https://metacpan.org/pod/App::perlbrew, Perlbrew MetaCPAN}

@noindent
@url{https://github.com/gugod/App-perlbrew, Perlbrew on Github}

@heading About

@command{perlbrew}  is an  admin-free perl  installation management  tool.  The
latest version is  0.84.  @command{perlbrew} is a tool to  manage multiple perl
installations  in your  @file{$HOME} directory.   They are  completely isolated
perl universes.  This approach has many benefits:

@itemize
@item
No need to run sudo to install CPAN modules, any more.
@item
Try the monthly released new perls.
@item
Learn new language features.
@item
Test your production code against different perl versions.
@item
Leave vendor perl (the one that comes with OS) alone
@item
Hacking perl internals.
@item
Just to keep up with fashion.
@end itemize

While  the  default  is  good  enough,  you may  customize  it  to  install  to
alternative  places,  or even  let  multiple  users  share the  whole  perlbrew
environment.




@c -----------------------------------------------------------------------------

@menu
* Install Perlbrew::
* Using Perlbrew::
* Perlbrew Articles::
@end menu

@node Install Perlbrew, Using Perlbrew, Perlbrew, Perlbrew
@section Install Perlbrew
@cindex install perlbrew
@cindex perlbrew installation

@heading Root Directory
@cindex root directory
@cindex perlbrew default root directory
@cindex PERLBREW_ROOT

The default @command{perlbrew} root directory is @file{~/perl5/perlbrew}, which
can be changed  by setting @env{PERLBREW_ROOT} environment  variable before the
installation  and  initialization.   For more  advanced  installation  process,
please   read   the   @url{http://metacpan.org/module/App::perlbrew,   perlbrew
document}.

@heading Download

Use one of these commands:

@example
\curl -L https://install.perlbrew.pl | bash
 (@pxref{Perlbrew Install Shell Script})

# Linux
\wget -O - https://install.perlbrew.pl | bash

# FreeBSD
\fetch -o- https://install.perlbrew.pl | sh
@end example

@heading With @command{cpan}

If you prefer to install with cpan, there are two steps:

@enumerate

@cindex @command{cpan} command
@item
@samp{sudo cpan App::perlbrew}

@cindex @command{init} command
@item
@samp{perlbrew init}
@end enumerate

If  it  is installed  with  @command{cpan},  the @command{perlbrew}  executable
should       be       installed      as       @file{/usr/bin/perlbrew}       or
@file{/usr/local/bin/perlbrew}.   For all  users who  want to  use perlbrew,  a
prior @command{perlbrew init} needs to be executed.

@cindex perlbrew directory structure
@cindex directory structure, under perlbrew
@heading Perlbrew Directory Structure

@verbatim
/Users/lolh/.perlbrew
└── init

/Users/lolh/perl5
└── perlbrew
    ├── bin
    │   ├── cpanm*
    │   ├── patchperl*
    │   └── perlbrew*
    ├── build
    │   └── perl-5.28.0
    │       └── perl-5.28.0
    ├── build.perl-5.28.0.log
    ├── dists
    │   └── perl-5.28.0.tar.gz
    ├── etc
    │   ├── bashrc
    │   ├── csh_reinit
    │   ├── csh_set_path
    │   ├── csh_wrapper
    │   ├── cshrc
    │   ├── perlbrew-completion.bash
    │   └── perlbrew.fish
    └── perls
        └── perl-5.28.0
            ├── bin
            ├── lib
            └── man

12 directories, 12 files
@end verbatim


@c .....................................

@menu
* Perlbrew Install Shell Script::
@end menu

@node Perlbrew Install Shell Script,  , Install Perlbrew, Install Perlbrew
@subsection Perlbrew Install Shell Script
@cindex install shell script

@heading Perlbrew Install

@need 400
@anchor{perlbrew-install-pl}
@cdindex @r{@{@file{perlbrew-install.pl}@}}, definition
@noindent
@r{@{@file{perlbrew-install.pl}@}} @equiv{}
@example
#!/bin/sh


if [ -z "$@{PERLBREWURL@}" ]; then
    PERLBREWURL=https://raw.githubusercontent.com/gugod/App-perlbrew/master/perlbrew
fi

clean_exit () @{
    [ ! -z "$LOCALINSTALLER" -a -f $LOCALINSTALLER ] && rm $LOCALINSTALLER
    exit $1
@}


if [ -z "$TMPDIR" -o ! -d "$TMPDIR" ]; then
    if [ -d "/tmp" ]; then
        TMPDIR="/tmp"
    else
        TMPDIR="."
    fi
fi

# TMPDIR could have been exported as variable
# so it is required to change to such directory always
cd $TMPDIR || clean_exit 1
LOCALINSTALLER=$(mktemp perlbrew.XXXXXX)





echo
if type curl >/dev/null 2>&1; then
  PERLBREWDOWNLOAD="curl -f -sS -Lo $LOCALINSTALLER $PERLBREWURL"
elif type fetch >/dev/null 2>&1; then
  PERLBREWDOWNLOAD="fetch -o $LOCALINSTALLER $PERLBREWURL"
elif type wget >/dev/null 2>&1; then
  PERLBREWDOWNLOAD="wget -nv -O $LOCALINSTALLER $PERLBREWURL"
else
  echo "Need either wget, fetch or curl to use $0"
  clean_exit
fi


echo "## Download the latest perlbrew"
$PERLBREWDOWNLOAD || clean_exit 1

echo
echo "## Installing perlbrew"

# loop thru available well known Perl installations
for PERL in "/usr/bin/perl" "/usr/local/bin/perl"
do
    [ -x "$PERL" ] && echo "Using Perl <$PERL>" && break
done

if [ ! -x "$PERL" ]; then
  echo "Need /usr/bin/perl or /usr/local/bin/perl to use $0"
  clean_exit 2
fi

[ ! -x $LOCALINSTALLER ] && chmod +x $LOCALINSTALLER
$PERL $LOCALINSTALLER self-install || clean_exit 3

echo "## Installing patchperl"
$PERL $LOCALINSTALLER -f -q install-patchperl || clean_exit 4

echo
echo "## Done."
rm ./$LOCALINSTALLER

@end example
@iftex
@smallfonts @rm
@end iftex
@iftex
@textfonts @rm
@end iftex




@c -----------------------------------------------------------------------------

@node Using Perlbrew, Perlbrew Articles, Install Perlbrew, Perlbrew
@section Using Perlbrew
@cindex perlbrew, using

@url{https://github.com/gugod/App-perlbrew, Perlbrew Git Repo}


@c -----------------------------------------------------------------------------

@node Perlbrew Articles,  , Using Perlbrew, Perlbrew
@section Perlbrew Articles
@cindex perlbrew articles

@table @cite

@cindex multiple installations
@item Managing Multiple Perl 5 Installations with Perlbrew (BSD Magazine, Volume 12, n. 1, issue 01/2018)
@url{https://bsdmag.org/download/build-scalable-monitoring-system-grafana-influxdb-riemann/}

@xref{Multiple Perl 5 Installations}

@cindex deploying perl bindings
@cindex Homebrew
@item Deploying Perl bindings from tools installed with Homebrew on OS X
@url{https://perlbrew.pl/Deploying-Perl-bindings-from-tools-installed-with-Homebrew-on-OS-X.html}

@cindex perlbrew configuration
@item Perlbrew Configuration
@url{https://perlbrew.pl/Perlbrew-Configuration.html}

@cindex perlbrew, reinstall all modules
@cindex modules, reinstall using perlbrew
@item Reinstall All Modules On New Perl
@url{https://perlbrew.pl/Reinstall-All-Modules-On-New-Perl.html}

@cindex @file{sitecustomize.pl}, perlbrew
@cindex perlbrew, @file{sitecustomize.pl}
@item Install a sitecustomize.pl file with perlbrew
@url{https://perlbrew.pl/Install-a-sitecustomize.pl-file-with-perlbrew.html}

@cindex perlbrew and git
@item Perlbrew development and the git flow
@url{https://perlbrew.pl/Perlbrew-development-and-the-git-flow.html}

@cindex perlbrew in shell scripts
@cindex shell scripts using perlbrew
@cindex scripts, shell and perlbrew
@item Perlbrew In Shell Scripts
@url{https://perlbrew.pl/Perlbrew-In-Shell-Scripts.html}

@cindex friends of perlbrew
@cindex perlbrew and friends
@item Perlbrew and Friends
@url{https://perlbrew.pl/Perlbrew-and-Friends.html}

@end table


@c .....................................

@menu
* Multiple Perl 5 Installations::
@end menu

@node Multiple Perl 5 Installations,  , Perlbrew Articles, Perlbrew Articles
@subsection Managing Multiple Perl 5 Installations
@cindex multiple perl5 installations with perlbrew
@cindex installations, multiple with perlbrew

@quotation
Perl 5 is a very stable, feature-rich, programming language used in a multitude
of environments and applications,  including operating system management tasks.
Perl  5  is available  in  several  versions,  and  usually, all  versions  are
backwards compatible. However, there are edge cases and new features that could
not be available on all versions. When dealing with Perl 5 application, it is a
relief to know  that the exact version required can  be installed, depending on
the  specific  feature  set  or   compatibility,  without  having  to  ask  for
administrator  privileges  or the  need  to  touch  the  system’s wide  Perl  5
installation. Perlbrew allows exactly that.
@author BSD Magazine
@end quotation

@heading About This Article
This paper  introduces Perlbrew, providing  simple instructions how  to install
and run.

@c _____________________________________

@menu
* Installing Perlbrew::
* Project Web Site::
* Getting To Know Perlbrew::
* Installing Perl 5::
* Managing Perl 5 Installations::
* Managing Modules::
@end menu

@node Installing Perlbrew, Project Web Site, Multiple Perl 5 Installations, Multiple Perl 5 Installations
@subsubsection Installing Perlbrew
@cindex install perlbrew

There are three main ways to install perlbrew (@pxref{Install Perlbrew}):

@enumerate
@item
Using the ports collection (the port is @file{devel/p5-App-perlbrew});
@item
By manually downloading and installing the  latest version from the project web
site;
@item
By installing it from the CPAN (the name is @file{App::Perlbrew}).
@end enumerate

@c _____________________________________

@node Project Web Site, Getting To Know Perlbrew, Installing Perlbrew, Multiple Perl 5 Installations
@subsubsection Installing From The Project Web Site
@cindex install from project site

Getting the program from the project web  site provides a better control on its
installation, as well as an always up-to-date version.

@heading Shell Script
In  order to  install perlbrew  directly from  the project’s  website, a
command  line utility  is  required  to download  data  via HTTP,  i.e.,
@command{curl}, @command{wget}, or @command{fetch}.   Now, provide a URL
(@pxref{Perlbrew Install  Shell Script})  to the  command, and  pipe the
result through a shell interpreter:

@example
% wget -O - https://install.perlbrew.pl | sh
...
## Installing perlbrew
Using Perl </usr/local/bin/perl>
perlbrew is installed: ~/perl5/perlbrew/bin/
...
@end example

Perlbrew  creates a  directory  tree in  the user's  home  directory under  the
@file{perl5/perlbrew} directory.  That's the main directory where perlbrew will
install Perl  5 versions,  and @file{perl5}  is the  local directory  to enable
per-user modules.  At the end of the installation, the program prints a message
about sourcing a file into @file{.profile}:

@example
source ~/perl5/perlbrew/etc/bashrc
@end example

@heading Checking the Installation
Once perlbrew has been  installed and all the shell files  have been loaded, it
is  possible  to  check  the installation  by  issuing  the  @command{perlbrew}
command, or with the version command to confirm the version installed:
@samp{perlbrew version}.

@c _____________________________________

@node Getting To Know Perlbrew, Installing Perl 5, Project Web Site, Multiple Perl 5 Installations
@subsubsection Getting To Know Perlbrew
@cindex getting to know perlbrew

@cindex @command{perlbrew} command
@cindex @command{help} command
The  @command{perlbrew}  command works  through  commands:  each action  to  be
performed  has to  be  specified via  one command  and,  or, options.   Running
perlbrew without any  command (or with a wrong command)  provides a help screen
with all the  available commands.  The @command{help} command  accepts the name
of another command as optional argument, providing more info about the usage of
the latter  command.  For instance,  @samp{perlbrew help init}  prints detailed
instructions about the init command.

@cindex activate perl
It  is  worth  noting  that  after  having  installed  perlbrew,  it  will  not
automatically  activate itself.   That is  the user  will continue  to use  the
system-wide Perl 5.

@cindex release numbers
@heading Release Numbers
Perlbrew  identifies  Perl  5  versions via  the  @dfn{release  numbers}.   For
instance, @code{5.27.7} identifies that specific version  of Perl 5.  If only a
version number  is provided,  perlbrew automatically  consider it  as a  Perl 5
version.  Otherwise,  the prefix  @code{perl-} can  be used,  and often,  it is
displayed through the commands output  (e.g., @code{perl-5.7.7}).  The usage of
a prefix helps to avoid clashes with cperl instances.

@c _____________________________________

@node Installing Perl 5, Managing Perl 5 Installations, Getting To Know Perlbrew, Multiple Perl 5 Installations
@subsubsection Installing Perl 5 Via Perlbrew
@cindex install Perl 5 via perlbrew

@heading Initializing Perlbrew
@cindex @command{init} command
@cindex initialize system

In order to start  using perlbrew, the system has to  be initialized. Using the
init command is as simple as simple as shown below:

@example
% perlbrew init

perlbrew root (~/perl5/perlbrew) is initialized.
@end example

The initialization step  must only be performed one time  per installation, and
does  not  enable any  specific  Perl  5 interpreter.  To  use  another Perl  5
interpreter, it is necessary to download and install it.

@heading Installing a Perl 5 Interpreter
@cindex install perl 5 interpreter

To install a new Perl 5 interpreter, follow the following steps:

@enumerate
@item
choose the right version from the available ones;

@cindex @command{available}
The command  @command{available} shows all  known Perl  5 versions that  can be
downloaded  and installed.  If  a version  has been  installed  on the  current
system, an @kbd{i} is placed at the beginning of the line.

Assume   the  latest   version,   @code{Perl  5.27.7},   is   chosen  for   the
installation. The  name, perlbrew  , recognizes  a Perl  5 interpreter  via the
first column of  the available output, so in this  case @code{perl-5.27.7}.  As
already stated,  it is possible to  omit the initial @code{perl-},  hence using
the name @code{5.27.7}, unless it clashes with cperl versions.

@cindex @command{install}
@item
ask perlbrew to install;

The @command{install}  command performs  a download  of the  specified version,
compiles it, and installs into the perlbrew directory tree.

@item
Optionally, switch to such version of Perl 5.

@cindex @command{list}
It is possible to see all installed versions using the @command{list} command:

@cindex @command{switch}
To start  using a  specific interpreter, the  @command{switch} command  must be
run, specifying of course the version the user wants to run.  Immediately after
switching  to the  specified  Perl 5  interpreter,  the @command{perl}  command
returns the  version that is  different from  the system-wide installed  Perl 5
(which in this article was @command{5.24.3}).

@item
Choose the version among those available

@item
Switching to System Perl
@cindex @command{off}
@cindex @command{switch-off}

If,  for any  reason,  you need  to  run some  commands  using the  system-wide
available Perl 5 interpreter, you can  turn perlbrew off with the @command{off}
command. As a result, all perlbrew  facilities (i.e., locally installed Perl 5)
will be disabled.  Also, it is important to note that the @command{off} command
works only in  the current shell, while the  @command{switch-off} command turns
off perlbrew on all subsequent shell instances.

To activate again the Perl 5 installed via perlbrew, it’s suffice to re-run the
@command{switch} command: @samp{% perlbrew switch 5.27.7 }.

@end enumerate

@c _____________________________________

@node Managing Perl 5 Installations, Managing Modules, Installing Perl 5, Multiple Perl 5 Installations
@subsubsection Managing Perl 5 Installations
@cindex managing installations

@heading Alias

@cindex @command{alias}
There  are   several  commands   are  essential  when   managing  the   Perl  5
installation. One useful  command is @command{alias}: it allows  for a renaming
of a  Perl 5 installation to  a more human-readable name.   The @command{alias}
command requires  a fully  qualified name,  not a  simple version  number.  For
instance, to name the just installed Perl @code{5.27.7} to @code{bsdmagv1} , it
is possible to create the new alias:

@example
% perlbrew alias create perl-5.27.7 bsdmagv1

% perlbrew list
@print{} bsdmagv1 (5.27.7)

% perlbrew switch bsdmagv1
@end example

As shown  above, @code{bsdmagv1} is  now a usable  name that refers  to version
@code{5.27.7}.

@cindex @option{--as}
The @command{alias}  command is  useful for post-install  management.  However,
the @command{install} command accepts an extra option @option{--as} that allows
for specifying a name that will be used as the main name for the installed Perl
5:

@example
% perlbrew install perl-5.8.9 --as my-first-perl
@end example

Therefore,  the Perl  5 will  be available  to perlbrew  via the  special name,
@code{my-first-perl}:

@example
% perlbrew list
@print{} my-first-perl (5.8.9)
@end example

@heading Uninstalling and Cleaning

In case a  Perl 5 distribution is no longer  necessary, the @command{uninstall}
command can be used to delete it.

The  @command{clean} command  removes  the compilation  objects and  downloaded
archives,  and that  is  useful to  get back  disk  space after  installations:
@samp{% perlbrew clean }.

@c _____________________________________

@node Managing Modules,  , Managing Perl 5 Installations, Multiple Perl 5 Installations
@subsubsection Managing Modules with @command{cpanm}

@cindex @command{cpanm} utility
Perl 5  is famous for its  rich module ecosystem,  kept in the CPAN.  There are
several tools to  manage CPAN modules from the command  line, and perlbrew uses
@command{cpanm}, a zero-configuration client.

@cindex @samp{install-cpanm} command
To use @command{cpanm}, you have to install  it so that perlbrew itself can use
it: the  @command{install-cpanm} command  does what  it says:  @samp{% perlbrew
install-cpanm }.  @command{cpanm} is installed widely through perlbrew, so that
it can be used for all the Perl 5 instances with a single installation.

Once @command{cpanm} is working, it is quite  easy to install a new module, for
instance @file{Archive::Zip}:

@example
% cpanm Archive::Zip
...
Successfully installed Archive-Zip-1.60
4 distributions installed
@end example

@cindex clone all modules
@cindex @command{clone-modules}
It is also easy to clone all  installed modules from an instance to another via
the command @command{clone-modules} as you can see here:

@example
% perlbrew clone-modules 5.27.7 5.26.1 
@end example

The above command will clone all modules installed on instance @code{5.27.7} to
instance @code{5.26.1}. This command is useful when you have a quite customized
Perl 5  installation, and want  to back up all  the modules you  have installed
overtime.


@c END SECTION: Perlbrew Articles
@c /////////////////////////////////////////////////////////////////////////////



@c END CHAPTER: Perlbrew
@c /////////////////////////////////////////////////////////////////////////////







@c *****************************************************************************
@c                            CHAPTER: Packages

@node About Packages, The Makefile, Perlbrew, Top
@chapter About Packages
@cindex about packages
@cindex packages, about

@need 400
@anchor{Makefile---Applications--Hook}
@cdindex @r{<@i{Makefile---Applications--Hook}>}, definition
@noindent
@r{<@i{Makefile---Applications--Hook}>} @equiv{}
@example

@end example
@iftex
@smallfonts @rm
@end iftex

@noindent
This chunk is called by @r{<@i{Makefile---Applications}>}; see its first definition at @ref{Makefile---Applications}.
@iftex
@textfonts @rm
@end iftex


@c -----------------------------------------------------------------------------

@menu
* Common Perl Code::
* Strict Warnings File-Spec Basename Lib::
* About File-Slurp::
@end menu

@node Common Perl Code, Strict Warnings File-Spec Basename Lib, About Packages, About Packages
@section Common Perl Code

@c .....................................

@node Strict Warnings File-Spec Basename Lib, About File-Slurp, Common Perl Code, About Packages
@section String Warnings File::Spec Basename Lib

@need 400
@anchor{Use-Strict-Warnings}
@cdindex @r{<@i{Use Strict Warnings}>}, definition
@noindent
@r{<@i{Use Strict Warnings}>} @equiv{}
@example
use strict;
use warnings;

@end example
@iftex
@smallfonts @rm
@end iftex

@noindent
This chunk is called by the following chunks:

@multitable @columnfractions .35 .65
@headitem Chunk name @tab First definition point
@item @r{<@i{00-report-prereqs.t---Body}>} @tab See @ref{00-report-prereqs-t---Body}.
@item @r{@{@file{01-error_edit_file.t}@}} @tab See @ref{01-error-edit-file-t}.
@item @r{@{@file{01-error_edit_file_lines.t}@}} @tab See @ref{01-error-edit-file-lines-t}.
@item @r{@{@file{01-error_prepend_file.t}@}} @tab See @ref{01-error-prepend-file-t}.
@item @r{<@i{Package---File--Slurp-Code}>} @tab See @ref{Package---File--Slurp-Code}.
@item @r{<@i{Test---FileSlurp--FileSlurpTest}>} @tab See @ref{Test---FileSlurp--FileSlurpTest}.
@item @r{@{@file{edit_file.t}@}} @tab See @ref{edit-file-t}.
@end multitable
@iftex
@textfonts @rm
@end iftex

@need 400
@anchor{Use-File-Spec-Basename}
@cdindex @r{<@i{Use File-Spec Basename}>}, definition
@noindent
@r{<@i{Use File-Spec Basename}>} @equiv{}
@example
use File::Spec ();
use File::Basename ();

@end example
@iftex
@smallfonts @rm
@end iftex

@noindent
This chunk is called by the following chunks:

@multitable @columnfractions .35 .65
@headitem Chunk name @tab First definition point
@item @r{@{@file{01-error_edit_file.t}@}} @tab See @ref{01-error-edit-file-t}.
@item @r{@{@file{01-error_edit_file_lines.t}@}} @tab See @ref{01-error-edit-file-lines-t}.
@item @r{@{@file{01-error_prepend_file.t}@}} @tab See @ref{01-error-prepend-file-t}.
@item @r{@{@file{FileSlurpTest.pm}@}} @tab See @ref{FileSlurpTest-pm}.
@item @r{@{@file{Slurp.pm}@}} @tab See @ref{Slurp-pm}.
@item @r{@{@file{edit_file.t}@}} @tab See @ref{edit-file-t}.
@end multitable
@iftex
@textfonts @rm
@end iftex

@need 400
@anchor{Use-TWJR-Lib}
@cdindex @r{<@i{Use TWJR Lib}>}, definition
@noindent
@r{<@i{Use TWJR Lib}>} @equiv{}
@example
use lib (File::Spec->catdir(File::Spec->rel2abs("./files"), 'lib'));

@end example
@iftex
@smallfonts @rm
@end iftex

@noindent
This chunk is called by the following chunks:

@multitable @columnfractions .35 .65
@headitem Chunk name @tab First definition point
@item @r{@{@file{01-error_edit_file.t}@}} @tab See @ref{01-error-edit-file-t}.
@item @r{@{@file{01-error_edit_file_lines.t}@}} @tab See @ref{01-error-edit-file-lines-t}.
@item @r{@{@file{01-error_prepend_file.t}@}} @tab See @ref{01-error-prepend-file-t}.
@item @r{@{@file{FileSlurpTest.pm}@}} @tab See @ref{FileSlurpTest-pm}.
@item @r{@{@file{Slurp.pm}@}} @tab See @ref{Slurp-pm}.
@item @r{@{@file{edit_file.t}@}} @tab See @ref{edit-file-t}.
@end multitable
@iftex
@textfonts @rm
@end iftex




@c -----------------------------------------------------------------------------
@c                          SECTION: File::Slurp

@node About File-Slurp,  , Strict Warnings File-Spec Basename Lib, About Packages
@section About File::Slurp
@cindex about @file{File::Slurp}
@cindex @file{File::Slurp}, about

Simple and Efficient Reading/Writing/Modifying of Complete Files

@subheading Current Version

@file{File::Slurp-9999.24} as of 2018-10-29

@heading Where is @file{File::Slurp}

@itemize

@item
@url{https://github.com/perhunter/slurp, @file{File::Slurp} on Github}

@item
@url{https://metacpan.org/release/File-Slurp, @file{File::Slurp} on MetaCPAN}
@end itemize


@c .....................................

@menu
* File-Slurp Manifest::
* File-Slurp Code::
* File-Slurp Tests::
* Test FileSlurpTest::
* FileSlurpTestOverride Code::
* Test 00-report-prereqs.dd::
* Test 00-report-prereqs.t::
* Test 01-error_edit_file.t::
* 01-error_edit_file_lines.t Test::
* 01-error_prepend_file.t Test::
* edit_file.t Test::
@end menu

@node File-Slurp Manifest, File-Slurp Code, About File-Slurp, About File-Slurp
@subsection @file{File::Slurp} Manifest
@cindex @file{File::Slurp} manifest
@cindex manifest for @file{File::Slurp}

@verbatim
.appveyor.cmd
.appveyor.yml
.mailmap
.travis.yml
Changes
lib/File/Slurp.pm
Makefile.PL
MANIFEST
MANIFEST.SKIP
META.json                       Module meta-data (added by MakeMaker)
README.md
t/00-report-prereqs.t
t/01-error_edit_file.t
t/01-error_edit_file_lines.t
t/01-error_prepend_file.t
t/01-error_read_dir.t
t/01-error_read_file.t
t/01-error_write_file.t
t/append_null.t
t/binmode.t
t/data_section.t
t/edit_file.t
t/error.t
t/file_object.t
t/handle.t
t/inode.t
t/large.t
t/lib/FileSlurpTest.pm
t/lib/FileSlurpTestOverride.pm
t/newline.t
t/no_clobber.t
t/original.t
t/paragraph.t
t/perms.t
t/prepend_file.t
t/pseudo.t
t/read_dir.t
t/slurp.t
t/stdin.t
t/stringify.t
t/tainted.t
t/write_file_win32.t
xt/author/00-compile.t
xt/author/eol.t
xt/author/pod-spell.t
xt/author/pod-syntax.t
xt/author/pod_coverage.t
xt/author/test-version.t
META.yml
@end verbatim


@c .....................................

@node File-Slurp Code, File-Slurp Tests, File-Slurp Manifest, About File-Slurp
@subsection @file{File::Slurp} Code
@cindex @file{File::Slurp} code

@need 400
@anchor{Slurp-pm}
@crindex @r{<@i{Use File-Spec Basename}>}, use
@crindex @r{<@i{Use TWJR Lib}>}, use
@crindex @r{<@i{Package---File--Slurp-Code}>}, use
@crindex @r{<@i{Package---File--Slurp-Perldoc}>}, use
@cdindex @r{@{@file{Slurp.pm}@}}, definition
@noindent
@r{@{@file{Slurp.pm}@}} @equiv{}
@example
@r{<@i{Use File-Spec Basename}>}
@r{<@i{Use TWJR Lib}>}
@r{<@i{Package---File--Slurp-Code}>}
@r{<@i{Package---File--Slurp-Perldoc}>}

@end example
@iftex
@smallfonts @rm
@end iftex

@noindent
The following table lists called chunk definition points.
@multitable @columnfractions .35 .65
@headitem Chunk name @tab First definition point
@item @r{<@i{Package---File--Slurp-Code}>} @tab See @ref{Package---File--Slurp-Code}.
@item @r{<@i{Package---File--Slurp-Perldoc}>} @tab See @ref{Package---File--Slurp-Perldoc}.
@item @r{<@i{Use File-Spec Basename}>} @tab See @ref{Use-File-Spec-Basename}.
@item @r{<@i{Use TWJR Lib}>} @tab See @ref{Use-TWJR-Lib}.
@end multitable
@iftex
@textfonts @rm
@end iftex


@need 400
@anchor{Makefile---Applications--Syntax-Checks-Hook-1}
@cdindex @r{<@i{Makefile---Applications--Syntax Checks-Hook}>}, definition
@noindent
@r{<@i{Makefile---Applications--Syntax Checks-Hook}>} @equiv{}
@example
    @@printf "$@{PURPLEBOLD@}"; perl -c $@{PWD@}/files/lib/File/Slurp.pm; printf "$@{CLEAR@}";
@end example
@iftex
@smallfonts @rm
@end iftex

@noindent
This chunk is also defined in
@ref{Makefile---Applications--Syntax-Checks-Hook-2},
@ref{Makefile---Applications--Syntax-Checks-Hook-3},
@ref{Makefile---Applications--Syntax-Checks-Hook-4},
@ref{Makefile---Applications--Syntax-Checks-Hook-5},
@ref{Makefile---Applications--Syntax-Checks-Hook-6}, and
@ref{Makefile---Applications--Syntax-Checks-Hook-7}.

@noindent
This chunk is called by @r{<@i{Makefile---Applications--Syntax Checks}>}; see its first definition at @ref{Makefile---Applications--Syntax-Checks}.
@iftex
@textfonts @rm
@end iftex

@c _____________________________________

@menu
* Package File-Slurp::
* Package File-Slurp Perldoc::
@end menu

@node Package File-Slurp, Package File-Slurp Perldoc, File-Slurp Code, File-Slurp Code
@subsubsection Package File::Slurp
@cindex package file::Slurp

@need 400
@anchor{Package---File--Slurp-Code}
@crindex @r{<@i{Use Strict Warnings}>}, use
@cdindex @r{<@i{Package---File--Slurp-Code}>}, definition
@noindent
@r{<@i{Package---File--Slurp-Code}>} @equiv{}
@example
package File::Slurp;

@r{<@i{Use Strict Warnings}>}

our $VERSION = '9999.24';
$VERSION = eval $VERSION;

use Carp ;
use Exporter qw(import);
use Fcntl qw( :DEFAULT ) ;
use File::Spec;
use POSIX qw( :fcntl_h ) ;
use Errno ;

my @@std_export = qw(
        read_file
        write_file
        overwrite_file
        append_file
        read_dir
) ;

my @@edit_export = qw(
        edit_file
        edit_file_lines
) ;

my @@abbrev_export = qw(
        rf
        wf
        ef
        efl
) ;

our @@EXPORT_OK = (
        @@edit_export,
        @@abbrev_export,
        qw(
                slurp
                prepend_file
        ),
) ;

our %EXPORT_TAGS = (
        'all'   => [ @@std_export, @@edit_export, @@abbrev_export, @@EXPORT_OK ],
        'edit'  => [ @@edit_export ],
        'std'   => [ @@std_export ],
        'abr'   => [ @@abbrev_export ],
) ;

our @@EXPORT = @@std_export ;

my $max_fast_slurp_size = 1024 * 100 ;

my $is_win32 = $^O =~ /win32/i ;

*slurp = \&read_file ;
*rf = \&read_file ;

sub read_file @{

        my $file_name = shift ;
        my $opts = ( ref $_[0] eq 'HASH' ) ? shift : @{ @@_ @} ;

# this is the optimized read_file for shorter files.
# the test for -s > 0 is to allow pseudo files to be read with the
# regular loop since they return a size of 0.

        if ( !ref $file_name && -e $file_name && -s _ > 0 &&
             -s _ < $max_fast_slurp_size && !%@{$opts@} && !wantarray ) @{


                my $fh ;
                unless( sysopen( $fh, $file_name, O_RDONLY ) ) @{

                        @@_ = ( $opts, "read_file '$file_name' - sysopen: $!");
                        goto &_error ;
                @}

                my $read_cnt = sysread( $fh, my $buf, -s _ ) ;

                unless ( defined $read_cnt ) @{

                        @@_ = ( $opts,
                                "read_file '$file_name' - small sysread: $!");
                        goto &_error ;
                @}

                $buf =~ s/\015\012/\n/g if $is_win32 ;
                return $buf ;
        @}

# set the buffer to either the passed in one or ours and init it to the null
# string

        my $buf ;
        my $buf_ref = $opts->@{'buf_ref'@} || \$buf ;
        $@{$buf_ref@} = '' ;

        my( $read_fh, $size_left, $blk_size ) ;

# deal with ref for a file name
# it could be an open handle or an overloaded object

        if ( ref $file_name ) @{

                my $ref_result = _check_ref( $file_name ) ;

                if ( ref $ref_result ) @{

# we got an error, deal with it

                        @@_ = ( $opts, $ref_result ) ;
                        goto &_error ;
                @}

                if ( $ref_result ) @{

# we got an overloaded object and the result is the stringified value
# use it as the file name

                        $file_name = $ref_result ;
                @}
                else @{

# here we have just an open handle. set $read_fh so we don't do a sysopen

                        $read_fh = $file_name ;
                        $blk_size = $opts->@{'blk_size'@} || 1024 * 1024 ;
                        $size_left = $blk_size ;
                @}
        @}

# see if we have a path we need to open

        unless ( $read_fh ) @{

# a regular file. set the sysopen mode

                my $mode = O_RDONLY ;

#printf "RD: BINARY %x MODE %x\n", O_BINARY, $mode ;

                $read_fh = local( *FH ) ;
#               $read_fh = gensym ;
                unless ( sysopen( $read_fh, $file_name, $mode ) ) @{
                        @@_ = ( $opts, "read_file '$file_name' - sysopen: $!");
                        goto &_error ;
                @}

                if ( my $binmode = $opts->@{'binmode'@} ) @{
                        binmode( $read_fh, $binmode ) ;
                @}

# get the size of the file for use in the read loop

                $size_left = -s $read_fh ;

#print "SIZE $size_left\n" ;

# we need a blk_size if the size is 0 so we can handle pseudofiles like in
# /proc. these show as 0 size but have data to be slurped.

                unless( $size_left ) @{

                        $blk_size = $opts->@{'blk_size'@} || 1024 * 1024 ;
                        $size_left = $blk_size ;
                @}
        @}

# infinite read loop. we exit when we are done slurping

        while( 1 ) @{

# do the read and see how much we got

                my $read_cnt = sysread( $read_fh, $@{$buf_ref@},
                                $size_left, length $@{$buf_ref@} ) ;

# since we're using sysread Perl won't automatically restart the call
# when interrupted by a signal.

                next if $!@{EINTR@};

                unless ( defined $read_cnt ) @{

                        @@_ = ( $opts, "read_file '$file_name' - loop sysread: $!");
                        goto &_error ;
                @}

# good read. see if we hit EOF (nothing left to read)

                last if $read_cnt == 0 ;

# loop if we are slurping a handle. we don't track $size_left then.

                next if $blk_size ;

# count down how much we read and loop if we have more to read.

                $size_left -= $read_cnt ;
                last if $size_left <= 0 ;
        @}

# fix up cr/lf to be a newline if this is a windows text file

        $@{$buf_ref@} =~ s/\015\012/\n/g if $is_win32 && !$opts->@{'binmode'@} ;

        my $sep = $/ ;
        $sep = '\n\n+' if defined $sep && $sep eq '' ;

# see if caller wants lines

        if( wantarray || $opts->@{'array_ref'@} ) @{

                use re 'taint' ;

                my @@lines = length($@{$buf_ref@}) ?
                        $@{$buf_ref@} =~ /(.*?$sep|.+)/sg : () ;

                chomp @@lines if $opts->@{'chomp'@} ;

# caller wants an array ref

                return \@@lines if $opts->@{'array_ref'@} ;

# caller wants list of lines

                return @@lines ;
        @}

# caller wants a scalar ref to the slurped text

        return $buf_ref if $opts->@{'scalar_ref'@} ;

# caller wants a scalar with the slurped text (normal scalar context)

        return $@{$buf_ref@} if defined wantarray ;

# caller passed in an i/o buffer by reference (normal void context)

        return ;
@}

# errors in this sub are returned as scalar refs
# a normal IO/GLOB handle is an empty return
# an overloaded object returns its stringified as a scalarfilename

sub _check_ref @{

        my( $handle ) = @@_ ;

# check if we are reading from a handle (GLOB or IO object)

        if ( eval @{ $handle->isa( 'GLOB' ) || $handle->isa( 'IO' ) @} ) @{

# we have a handle. deal with seeking to it if it is DATA

                my $err = _seek_data_handle( $handle ) ;

# return the error string if any

                return \$err if $err ;

# we have good handle
                return ;
        @}

        eval @{ require overload @} ;

# return an error if we can't load the overload pragma
# or if the object isn't overloaded

        return \"Bad handle '$handle' is not a GLOB or IO object or overloaded"
                 if $@@ || !overload::Overloaded( $handle ) ;

# must be overloaded so return its stringified value

        return "$handle" ;
@}

sub _seek_data_handle @{

        my( $handle ) = @@_ ;

# DEEP DARK MAGIC. this checks the UNTAINT IO flag of a
# glob/handle. only the DATA handle is untainted (since it is from
# trusted data in the source file). this allows us to test if this is
# the DATA handle and then to do a sysseek to make sure it gets
# slurped correctly. on some systems, the buffered i/o pointer is not
# left at the same place as the fd pointer. this sysseek makes them
# the same so slurping with sysread will work.

        eval@{ require B @} ;

        if ( $@@ ) @{

                return <<ERR ;
Can't find B.pm with this Perl: $!.
That module is needed to properly slurp the DATA handle.
ERR
        @}

        if ( B::svref_2object( $handle )->IO->IoFLAGS & 16 ) @{

# set the seek position to the current tell.

                unless( sysseek( $handle, tell( $handle ), SEEK_SET ) ) @{
                        return "read_file '$handle' - sysseek: $!" ;
                @}
        @}

# seek was successful, return no error string

        return ;
@}


*wf = \&write_file ;

sub write_file @{

        my $file_name = shift ;

# get the optional argument hash ref from @@_ or an empty hash ref.

        my $opts = ( ref $_[0] eq 'HASH' ) ? shift : @{@} ;

        my( $buf_ref, $write_fh, $no_truncate, $orig_file_name, $data_is_ref ) ;

# get the buffer ref - it depends on how the data is passed into write_file
# after this if/else $buf_ref will have a scalar ref to the data.

        if ( ref $opts->@{'buf_ref'@} eq 'SCALAR' ) @{

# a scalar ref passed in %opts has the data
# note that the data was passed by ref

                $buf_ref = $opts->@{'buf_ref'@} ;
                $data_is_ref = 1 ;
        @}
        elsif ( ref $_[0] eq 'SCALAR' ) @{

# the first value in @@_ is the scalar ref to the data
# note that the data was passed by ref

                $buf_ref = shift ;
                $data_is_ref = 1 ;
        @}
        elsif ( ref $_[0] eq 'ARRAY' ) @{

# the first value in @@_ is the array ref to the data so join it.

                $@{$buf_ref@} = join '', @@@{$_[0]@} ;
        @}
        else @{

# good old @@_ has all the data so join it.

                $@{$buf_ref@} = join '', @@_ ;
        @}

# deal with ref for a file name

        if ( ref $file_name ) @{

                my $ref_result = _check_ref( $file_name ) ;

                if ( ref $ref_result ) @{

# we got an error, deal with it

                        @@_ = ( $opts, $ref_result ) ;
                        goto &_error ;
                @}

                if ( $ref_result ) @{

# we got an overloaded object and the result is the stringified value
# use it as the file name

                        $file_name = $ref_result ;
                @}
                else @{

# we now have a proper handle ref.
# make sure we don't call truncate on it.

                        $write_fh = $file_name ;
                        $no_truncate = 1 ;
                @}
        @}

# see if we have a path we need to open

        unless( $write_fh ) @{

# spew to regular file.

                if ( $opts->@{'atomic'@} ) @{

# in atomic mode, we spew to a temp file so make one and save the original
# file name.
                        $orig_file_name = $file_name ;
                        $file_name .= ".$$" ;
                @}

# set the mode for the sysopen

                my $mode = O_WRONLY | O_CREAT ;
                $mode |= O_APPEND if $opts->@{'append'@} ;
                $mode |= O_EXCL if $opts->@{'no_clobber'@} ;

                my $perms = $opts->@{perms@} ;
                $perms = 0666 unless defined $perms ;

#printf "WR: BINARY %x MODE %x\n", O_BINARY, $mode ;

# open the file and handle any error.

                $write_fh = local( *FH ) ;
#               $write_fh = gensym ;
                unless ( sysopen( $write_fh, $file_name, $mode, $perms ) ) @{

                        @@_ = ( $opts, "write_file '$file_name' - sysopen: $!");
                        goto &_error ;
                @}
        @}

        if ( my $binmode = $opts->@{'binmode'@} ) @{
                binmode( $write_fh, $binmode ) ;
        @}

        sysseek( $write_fh, 0, SEEK_END ) if $opts->@{'append'@} ;

#print 'WR before data ', unpack( 'H*', $@{$buf_ref@}), "\n" ;

# fix up newline to write cr/lf if this is a windows text file

        if ( $is_win32 && !$opts->@{'binmode'@} ) @{

# copy the write data if it was passed by ref so we don't clobber the
# caller's data
                $buf_ref = \do@{ my $copy = $@{$buf_ref@}; @} if $data_is_ref ;
                $@{$buf_ref@} =~ s/\n/\015\012/g ;
        @}

#print 'after data ', unpack( 'H*', $@{$buf_ref@}), "\n" ;

# get the size of how much we are writing and init the offset into that buffer

        my $size_left = length( $@{$buf_ref@} ) ;
        my $offset = 0 ;

# loop until we have no more data left to write

        do @{

# do the write and track how much we just wrote

                my $write_cnt = syswrite( $write_fh, $@{$buf_ref@},
                                $size_left, $offset ) ;

# since we're using syswrite Perl won't automatically restart the call
# when interrupted by a signal.

                next if $!@{EINTR@};

                unless ( defined $write_cnt ) @{

                        @@_ = ( $opts, "write_file '$file_name' - syswrite: $!");
                        goto &_error ;
                @}

# track how much left to write and where to write from in the buffer

                $size_left -= $write_cnt ;
                $offset += $write_cnt ;

        @} while( $size_left > 0 ) ;

# we truncate regular files in case we overwrite a long file with a shorter file
# so seek to the current position to get it (same as tell()).

        truncate( $write_fh,
                  sysseek( $write_fh, 0, SEEK_CUR ) ) unless $no_truncate ;

        close( $write_fh ) ;

# handle the atomic mode - move the temp file to the original filename.

        if ( $opts->@{'atomic'@} && !rename( $file_name, $orig_file_name ) ) @{

                @@_ = ( $opts, "write_file '$file_name' - rename: $!" ) ;
                goto &_error ;
        @}

        return 1 ;
@}

# this is for backwards compatibility with the previous File::Slurp module.
# write_file always overwrites an existing file

*overwrite_file = \&write_file ;

# the current write_file has an append mode so we use that. this
# supports the same API with an optional second argument which is a
# hash ref of options.

sub append_file @{

# get the optional opts hash ref
        my $opts = $_[1] ;
        if ( ref $opts eq 'HASH' ) @{

# we were passed an opts ref so just mark the append mode

                $opts->@{append@} = 1 ;
        @}
        else @{

# no opts hash so insert one with the append mode

                splice( @@_, 1, 0, @{ append => 1 @} ) ;
        @}

# magic goto the main write_file sub. this overlays the sub without touching
# the stack or @@_

        goto &write_file
@}

# prepend data to the beginning of a file

sub prepend_file @{

        my $file_name = shift ;

#print "FILE $file_name\n" ;

        my $opts = ( ref $_[0] eq 'HASH' ) ? shift : @{@} ;

# delete unsupported options

        my @@bad_opts =
                grep $_ ne 'err_mode' && $_ ne 'binmode', keys %@{$opts@} ;

        delete @@@{$opts@}@{@@bad_opts@} ;

        my $prepend_data = shift ;
        $prepend_data = '' unless defined $prepend_data ;
        $prepend_data = $@{$prepend_data@} if ref $prepend_data eq 'SCALAR' ;

#print "PRE [$prepend_data]\n" ;

        my $err_mode = delete $opts->@{err_mode@} ;
        $opts->@{ err_mode @} = 'croak' ;
        $opts->@{ scalar_ref @} = 1 ;

        my $existing_data = eval @{ read_file( $file_name, $opts ) @} ;

        if ( $@@ ) @{

                @@_ = ( @{ err_mode => $err_mode @},
                        "prepend_file '$file_name' - read_file: $!" ) ;
                goto &_error ;
        @}

#print "EXIST [$$existing_data]\n" ;

        $opts->@{atomic@} = 1 ;
        my $write_result =
                eval @{ write_file( $file_name, $opts,
                       $prepend_data, $$existing_data ) ;
        @} ;

        if ( $@@ ) @{

                @@_ = ( @{ err_mode => $err_mode @},
                        "prepend_file '$file_name' - write_file: $!" ) ;
                goto &_error ;
        @}

        return $write_result ;
@}

# edit a file as a scalar in $_

*ef = \&edit_file ;

sub edit_file(&$;$) @{

        my( $edit_code, $file_name, $opts ) = @@_ ;
        $opts = @{@} unless ref $opts eq 'HASH' ;

#       my $edit_code = shift ;
#       my $file_name = shift ;
#       my $opts = ( ref $_[0] eq 'HASH' ) ? shift : @{@} ;

#print "FILE $file_name\n" ;

# delete unsupported options

        my @@bad_opts =
                grep $_ ne 'err_mode' && $_ ne 'binmode', keys %@{$opts@} ;

        delete @@@{$opts@}@{@@bad_opts@} ;

# keep the user err_mode and force croaking on internal errors

        my $err_mode = delete $opts->@{err_mode@} ;
        $opts->@{ err_mode @} = 'croak' ;

# get a scalar ref for speed and slurp the file into a scalar

        $opts->@{ scalar_ref @} = 1 ;
        my $existing_data = eval @{ read_file( $file_name, $opts ) @} ;

        if ( $@@ ) @{

                @@_ = ( @{ err_mode => $err_mode @},
                        "edit_file '$file_name' - read_file: $!" ) ;
                goto &_error ;
        @}

#print "EXIST [$$existing_data]\n" ;

        my( $edited_data ) = map @{ $edit_code->(); $_ @} $$existing_data ;

        $opts->@{atomic@} = 1 ;
        my $write_result =
                eval @{ write_file( $file_name, $opts, $edited_data ) @} ;

        if ( $@@ ) @{

                @@_ = ( @{ err_mode => $err_mode @},
                        "edit_file '$file_name' - write_file: $!" ) ;
                goto &_error ;
        @}

        return $write_result ;
@}

*efl = \&edit_file_lines ;

sub edit_file_lines(&$;$) @{

        my( $edit_code, $file_name, $opts ) = @@_ ;
        $opts = @{@} unless ref $opts eq 'HASH' ;

#       my $edit_code = shift ;
#       my $file_name = shift ;
#       my $opts = ( ref $_[0] eq 'HASH' ) ? shift : @{@} ;

#print "FILE $file_name\n" ;

# delete unsupported options

        my @@bad_opts =
                grep $_ ne 'err_mode' && $_ ne 'binmode', keys %@{$opts@} ;

        delete @@@{$opts@}@{@@bad_opts@} ;

# keep the user err_mode and force croaking on internal errors

        my $err_mode = delete $opts->@{err_mode@} ;
        $opts->@{ err_mode @} = 'croak' ;

# get an array ref for speed and slurp the file into lines

        $opts->@{ array_ref @} = 1 ;
        my $existing_data = eval @{ read_file( $file_name, $opts ) @} ;

        if ( $@@ ) @{

                @@_ = ( @{ err_mode => $err_mode @},
                        "edit_file_lines '$file_name' - read_file: $!" ) ;
                goto &_error ;
        @}

#print "EXIST [$$existing_data]\n" ;

        my @@edited_data = map @{ $edit_code->(); $_ @} @@$existing_data ;

        $opts->@{atomic@} = 1 ;
        my $write_result =
                eval @{ write_file( $file_name, $opts, @@edited_data ) @} ;

        if ( $@@ ) @{

                @@_ = ( @{ err_mode => $err_mode @},
                        "edit_file_lines '$file_name' - write_file: $!" ) ;
                goto &_error ;
        @}

        return $write_result ;
@}

# basic wrapper around opendir/readdir

sub read_dir @{

        my $dir = shift ;
        my $opts = ( ref $_[0] eq 'HASH' ) ? shift : @{ @@_ @} ;

# this handle will be destroyed upon return

        local(*DIRH);

# open the dir and handle any errors

        unless ( opendir( DIRH, $dir ) ) @{

                @@_ = ( $opts, "read_dir '$dir' - opendir: $!" ) ;
                goto &_error ;
        @}

        my @@dir_entries = readdir(DIRH) ;

        @@dir_entries = grep( $_ ne "." && $_ ne "..", @@dir_entries )
                unless $opts->@{'keep_dot_dot'@} ;

        if ( $opts->@{'prefix'@} ) @{

                $_ = File::Spec->catfile($dir, $_) for @@dir_entries;
        @}

        return @@dir_entries if wantarray ;
        return \@@dir_entries ;
@}

# error handling section
#
# all the error handling uses magic goto so the caller will get the
# error message as if from their code and not this module. if we just
# did a call on the error code, the carp/croak would report it from
# this module since the error sub is one level down on the call stack
# from read_file/write_file/read_dir.


my %err_func = (
        'carp'  => \&carp,
        'croak' => \&croak,
) ;

sub _error @{

        my( $opts, $err_msg ) = @@_ ;

# get the error function to use

        my $func = $err_func@{ $opts->@{'err_mode'@} || 'croak' @} ;

# if we didn't find it in our error function hash, they must have set
# it to quiet and we don't do anything.

        return unless $func ;

# call the carp/croak function

        $func->($err_msg) if $func ;

# return a hard undef (in list context this will be a single value of
# undef which is not a legal in-band value)

        return undef ;
@}

1;
__END__

@end example
@iftex
@smallfonts @rm
@end iftex

@noindent
This chunk is called by @r{@{@file{Slurp.pm}@}}; see its first definition at @ref{Slurp-pm}.

@noindent
The called chunk @r{<@i{Use Strict Warnings}>} is first defined at
@ref{Use-Strict-Warnings}.
@iftex
@textfonts @rm
@end iftex

@c _____________________________________

@node Package File-Slurp Perldoc,  , Package File-Slurp, File-Slurp Code
@subsubsection Package File::Slurp Perldoc
@cindex package File::Slurp perldoc
@cindex perldoc for package File::Slurp

@need 400
@anchor{Package---File--Slurp-Perldoc}
@cdindex @r{<@i{Package---File--Slurp-Perldoc}>}, definition
@noindent
@r{<@i{Package---File--Slurp-Perldoc}>} @equiv{}
@example
=head1 NAME

File::Slurp - Simple and Efficient Reading/Writing/Modifying of Complete Files

=head1 SYNOPSIS

  use File::Slurp;

  # read in a whole file into a scalar
  my $text = read_file('/path/file');

  # read in a whole file into an array of lines
  my @@lines = read_file('/path/file');

  # write out a whole file from a scalar
  write_file('/path/file', $text);

  # write out a whole file from an array of lines
  write_file('/path/file', @@lines);

  # Here is a simple and fast way to load and save a simple config file
  # made of key=value lines.
  my %conf = read_file('/path/file') =~ /^(\w+)=(.*)$/mg;
  write_file('/path/file', @{atomic => 1@}, map "$_=$conf@{$_@}\n", keys %conf);

  # insert text at the beginning of a file
  prepend_file('/path/file', $text);

  # in-place edit to replace all 'foo' with 'bar' in file
  edit_file @{ s/foo/bar/g @} '/path/file';

  # in-place edit to delete all lines with 'foo' from file
  edit_file_lines sub @{ $_ = '' if /foo/ @}, '/path/file';

  # read in a whole directory of file names (skipping . and ..)
  my @@files = read_dir('/path/to/dir');

=head1 DESCRIPTION

This module provides subs that allow you to read or write entire files
with one simple call. They are designed to be simple to use, have
flexible ways to pass in or get the file contents and to be very
efficient. There is also a sub to read in all the files in a
directory.

=head2 WARNING - PENDING DOOM

Although you technically I<can>, do NOT use this module to work on file handles,
pipes, sockets, standard IO, pseudo-files, or the C<DATA> handle. These are
features implemented long ago that just really shouldn't be abused here.

Be warned: this activity will lead to inaccurate encoding/decoding of data.

All further mentions of actions on the above have been removed from this
documentation and that feature set will likely be deprecated in the future.

In other words, if you don't have a filename to pass, consider using the
standard C<< do @{ local $/; <$fh> @} >>, or
L<Data::Section>/L<Data::Section::Simple> for working with C<__DATA__>.

=head1 FUNCTIONS

L<File::Slurp> implements the following functions.

=head2 append_file

        use File::Spec qw(append_file write_file);
        my $res = append_file('/path/file', "Some text");
        # same as
        my $res = write_file('/path/file', @{append => 1@}, "Some text");

The C<append_file> function is simply a synonym for the
L<File::Slurp/"write_file"> function, but ensures that the C<append> option is
set.

=head2 edit_file

        use File::Slurp qw(edit_file);
        # perl -0777 -pi -e 's/foo/bar/g' /path/file
        edit_file @{ s/foo/bar/g @} '/path/file';
        edit_file sub @{ s/foo/bar/g @}, '/path/file';
        sub replace_foo @{ s/foo/bar/g @}
        edit_file \&replace_foo, '/path/file';

The C<edit_file> function reads in a file into C<$_>, executes a code block that
should modify C<$_>, and then writes C<$_> back to the file. The C<edit_file>
function reads in the entire file and calls the code block one time. It is
equivalent to the C<-pi> command line options of Perl but you can call it from
inside your program and not have to fork out a process.

The first argument to C<edit_file> is a code block or a code reference. The
code block is not followed by a comma (as with C<grep> and C<map>) but a code
reference is followed by a comma.

The next argument is the filename.

The next argument(s) is either a hash reference or a flattened hash,
C<< key => value >> pairs. The options are passed through to the
L<File::Slurp/"write_file"> function. All options are described there.
Only the C<binmode> and C<err_mode> options are supported. The call to
L<File::Slurp/"write_file"> has the C<atomic> option set so you will always
have a consistent file.

=head2 edit_file_lines

        use File::Slurp qw(edit_file_lines);
        # perl -pi -e '$_ = "" if /foo/' /path/file
        edit_file_lines @{ $_ = '' if /foo/ @} '/path/file';
        edit_file_lines sub @{ $_ = '' if /foo/ @}, '/path/file';
        sub delete_foo @{ $_ = '' if /foo/ @}
        edit_file \&delete_foo, '/path/file';

The C<edit_file_lines> function reads each line of a file into C<$_>, and
executes a code block that should modify C<$_>. It will then write C<$_> back
to the file. It is equivalent to the C<-pi> command line options of Perl but
you can call it from inside your program and not have to fork out a process.

The first argument to C<edit_file_lines> is a code block or a code reference.
The code block is not followed by a comma (as with C<grep> and C<map>) but a
code reference is followed by a comma.

The next argument is the filename.

The next argument(s) is either a hash reference or a flattened hash,
C<< key => value >> pairs. The options are passed through to the
L<File::Slurp/"write_file"> function. All options are described there.
Only the C<binmode> and C<err_mode> options are supported. The call to
L<File::Slurp/"write_file"> has the C<atomic> option set so you will always
have a consistent file.

=head2 ef

        use File::Slurp qw(ef);
        # perl -0777 -pi -e 's/foo/bar/g' /path/file
        ef @{ s/foo/bar/g @} '/path/file';
        ef sub @{ s/foo/bar/g @}, '/path/file';
        sub replace_foo @{ s/foo/bar/g @}
        ef \&replace_foo, '/path/file';

The C<ef> function is simply a synonym for the L<File::Slurp/"edit_file">
function.

=head2 efl

        use File::Slurp qw(efl);
        # perl -pi -e '$_ = "" if /foo/' /path/file
        efl @{ $_ = '' if /foo/ @} '/path/file';
        efl sub @{ $_ = '' if /foo/ @}, '/path/file';
        sub delete_foo @{ $_ = '' if /foo/ @}
        efl \&delete_foo, '/path/file';

The C<efl> function is simply a synonym for the L<File::Slurp/"edit_file_lines">
function.

=head2 overwrite_file

        use File::Spec qw(overwrite_file);
        my $res = overwrite_file('/path/file', "Some text");

The C<overwrite_file> function is simply a synonym for the
L<File::Slurp/"write_file"> function.

=head2 prepend_file

        use File::Slurp qw(prepend_file);
        prepend_file('/path/file', $header);
        prepend_file('/path/file', \@@lines);
        prepend_file('/path/file', @{ binmode => 'raw:'@}, $bin_data);

        # equivalent to:
        use File::Slurp qw(read_file write_file);
        my $content = read_file('/path/file');
        my $new_content = "hahahaha";
        write_file('/path/file', $new_content . $content);

The C<prepend_file> function is the opposite of L<File::Slurp/"append_file"> as
it writes new contents to the beginning of the file instead of the end. It is a
combination of L<File::Slurp/"read_file"> and L<File::Slurp/"write_file">. It
works by first using C<read_file> to slurp in the file and then calling
C<write_file> with the new data and the existing file data.

The first argument to C<prepend_file> is the filename.

The next argument(s) is either a hash reference or a flattened hash,
C<< key => value >> pairs. The options are passed through to the
L<File::Slurp/"write_file"> function. All options are described there.

Only the C<binmode> and C<err_mode> options are supported. The
C<write_file> call has the C<atomic> option set so you will always have
a consistent file.

=head2 read_dir

        use File::Spec qw(read_dir);
        my @@files = read_dir('/path/to/dir');
        # all files, even the dots
        my @@files = read_dir('/path/to/dir', keep_dot_dot => 1);
        # keep the full file path
        my @@paths = read_dir('/path/to/dir', prefix => 1);
        # scalar context
        my $files_ref = read_dir('/path/to/dir');

This function returns a list of the filenames in the supplied directory. In
list context, an array is returned, in scalar context, an array reference is
returned.

The first argument is the path to the directory to read.

The next argument(s) is either a hash reference or a flattened hash,
C<< key => value >> pairs. The following options are available:

=over

=item

err_mode

The C<err_mode> option has three possible values: C<quiet>, C<carp>, or the
default, C<croak>. In C<quiet> mode, all errors will be silent. In C<carp> mode,
all errors will be emitted as warnings. And, in C<croak> mode, all errors will
be emitted as exceptions. Take a look at L<Try::Tiny> or
L<Syntax::Keyword::Try> to see how to catch exceptions.

=item

keep_dot_dot

The C<keep_dot_dot> option is a boolean option, defaulted to false (C<0>).
Setting this option to true (C<1>) will also return the C<.> and C<..> files
that are removed from the file list by default.

=item

prefix

The C<prefix> option is a boolean option, defaulted to false (C<0>).
Setting this option to true (C<1>) add the directory as a prefix to the file.
The directory and the filename are joined using C<< File::Spec->catfile() >> to
ensure the proper directory separator is used for your OS. See L<File::Spec>.

=back

=head2 read_file

        use File::Slurp qw(read_file);
        my $text = read_file('/path/file');
        my $bin = read_file('/path/file', @{ binmode => ':raw' @});
        my @@lines = read_file('/path/file');
        my $lines_ref = read_file('/path/file', array_ref => 1);
        my $lines_ref = [ read_file('/path/file') ];

        # or we can read into a buffer:
        my $buffer;
        read_file('/path/file', buf_ref => \$buffer);

        # or we can set the block size for the read
        my $text_ref = read_file('/path/file', blk_size => 10_000_000, array_ref => 1);

        # or we can get a scalar reference
        my $text_ref = read_file('/path/file', scalar_ref => 1);

This function reads in an entire file and returns its contents to the
caller. In scalar context it returns the entire file as a single
scalar. In list context it will return a list of lines (using the
current value of C<$/> as the separator, including support for paragraph
mode when it is set to C<''>).

The first argument is the path to the file to be slurped in.

The next argument(s) is either a hash reference or a flattened hash,
C<< key => value >> pairs. The following options are available:

=over

=item

array_ref

The C<array_ref> option is a boolean option, defaulted to false (C<0>). Setting
this option to true (C<1>) will only have relevance if the C<read_file> function
is called in scalar context. When true, the C<read_file> function will return
a reference to an array of the lines in the file.

=item

binmode

The C<binmode> option is a string option, defaulted to empty (C<''>). If you
set the C<binmode> option, then its value is passed to a call to C<binmode> on
the opened handle. You can use this to set the file to be read in binary mode,
utf8, etc. See C<perldoc -f binmode> for more.

=item

blk_size

You can use this option to set the block size used when slurping from
an already open handle (like C<\*STDIN>). It defaults to 1MB.

=item

buf_ref

The C<buf_ref> option can be used in conjunction with any of the other options.
You can use this option to pass in a scalar reference and the slurped
file contents will be stored in the scalar. This saves an extra copy of
the slurped file and can lower RAM usage vs returning the file. It is
usually the fastest way to read a file into a scalar.

=item

chomp

The C<chomp> option is a boolean option, defaulted to false (C<0>). Setting
this option to true (C<1>) will cause each line to have its contents C<chomp>ed.
This option works in list context or in scalar context with the C<array_ref>
option.

=item

err_mode

The C<err_mode> option has three possible values: C<quiet>, C<carp>, or the
default, C<croak>. In C<quiet> mode, all errors will be silent. In C<carp> mode,
all errors will be emitted as warnings. And, in C<croak> mode, all errors will
be emitted as exceptions. Take a look at L<Try::Tiny> or
L<Syntax::Keyword::Try> to see how to catch exceptions.

=item

scalar_ref

The C<scalar_ref> option is a boolean option, defaulted to false (C<0>). It only
has meaning in scalar context. The return value will be a scalar reference to a
string which is the contents of the slurped file. This will usually be faster
than returning the plain scalar. It will also save memory as it will not make a
copy of the file to return.

=back

=head2 rf

        use File::Spec qw(rf);
        my $text = rf('/path/file');

The C<rf> function is simply a synonym for the L<File::Slurp/"read_file">
function.

=head2 slurp

        use File::Spec qw(slurp);
        my $text = slurp('/path/file');

The C<slurp> function is simply a synonym for the L<File::Slurp/"read_file">
function.

=head2 wf

        use File::Spec qw(wf);
        my $res = wf('/path/file', "Some text");


The C<wf> function is simply a synonym for the
L<File::Slurp/"write_file"> function.

=head2 write_file

        use File::Slurp qw(write_file);
        write_file('/path/file', @@data);
        write_file('/path/file', @{append => 1@}, @@data);
        write_file('/path/file', @{binmode => ':raw'@}, $buffer);
        write_file('/path/file', \$buffer);
        write_file('/path/file', $buffer);
        write_file('/path/file', \@@lines);
        write_file('/path/file', @@lines);

        # binmode
        write_file('/path/file', @{binmode => ':raw'@}, @@data);
        write_file('/path/file', @{binmode => ':utf8'@}, $utf_text);

        # buffered
        write_file('/path/file', @{buf_ref => \$buffer@});
        write_file('/path/file', \$buffer);
        write_file('/path/file', $buffer);

        # append
        write_file('/path/file', @{append => 1@}, @@data);

        # no clobbering
        write_file('/path/file', @{no_clobber => 1@}, @@data);

This function writes out an entire file in one call. By default C<write_file>
returns C<1> upon successfully writing the file or C<undef> if it encountered
an error. You can change how errors are handled with the C<err_mode> option.

The first argument to C<write_file> is the filename.

The next argument(s) is either a hash reference or a flattened hash,
C<< key => value >> pairs. The following options are available:

=over

=item

append

The C<append> option is a boolean option, defaulted to false (C<0>). Setting
this option to true (C<1>) will cause the data to be be written at the end of
the current file. Internally this sets the C<sysopen> mode flag C<O_APPEND>.

The L<File::Slurp/"append_file"> function sets this option by default.

=item

atomic

The C<atomic> option is a boolean option, defaulted to false (C<0>). Setting
this option to true (C<1>) will cause the file to be be written to in an
atomic fashion. A temporary file name is created by appending the pid
(C<$$>) to the file name argument and that file is spewed to. After the
file is closed it is renamed to the original file name (and C<rename> is
an atomic operation on most OSes). If the program using this were to
crash in the middle of this, then the file with the pid suffix could
be left behind.

=item

binmode

The C<binmode> option is a string option, defaulted to empty (C<''>). If you
set the C<binmode> option, then its value is passed to a call to C<binmode> on
the opened handle. You can use this to set the file to be read in binary mode,
utf8, etc. See C<perldoc -f binmode> for more.

=item

buf_ref

The C<buf_ref> option is used to pass in a scalar reference which has the
data to be written. If this is set then any data arguments (including
the scalar reference shortcut) in C<@@_> will be ignored.

=item

err_mode

The C<err_mode> option has three possible values: C<quiet>, C<carp>, or the
default, C<croak>. In C<quiet> mode, all errors will be silent. In C<carp> mode,
all errors will be emitted as warnings. And, in C<croak> mode, all errors will
be emitted as exceptions. Take a look at L<Try::Tiny> or
L<Syntax::Keyword::Try> to see how to catch exceptions.


=item

no_clobber

The C<no_clobber> option is a boolean option, defaulted to false (C<0>). Setting
this option to true (C<1>) will ensure an that existing file will not be
overwritten.

=item

perms

The C<perms> option sets the permissions of newly-created files. This value
is modified by your process's C<umask> and defaults to C<0666> (same as
C<sysopen>).

NOTE: this option is new as of File::Slurp version 9999.14.

=back

=head1 EXPORT

These are exported by default or with

        use File::Slurp qw(:std);
        # read_file write_file overwrite_file append_file read_dir

These are exported with

        use File::Slurp qw(:edit);
        # edit_file edit_file_lines

You can get all subs in the module exported with

        use File::Slurp qw(:all);

=head1 AUTHOR

Uri Guttman, <F<uri@@stemsystems.com>>

=head1 COPYRIGHT & LICENSE

Copyright (c) 2003 Uri Guttman. All rights reserved.

This program is free software; you can redistribute it and/or modify it
under the same terms as Perl itself.

=cut

@end example
@iftex
@smallfonts @rm
@end iftex

@noindent
This chunk is called by @r{@{@file{Slurp.pm}@}}; see its first definition at @ref{Slurp-pm}.
@iftex
@textfonts @rm
@end iftex




@c .....................................

@node File-Slurp Tests, Test FileSlurpTest, File-Slurp Code, About File-Slurp
@subsection @file{File::Slurp} Tests
@cindex @file{File::Slurp} tests
@cindex tests of @file{File::Slurp}

@heading List of Tests for File-Slurp

@verbatim
t/00-report-prereqs.t
t/01-error_edit_file.t
t/01-error_edit_file_lines.t
t/01-error_prepend_file.t
t/01-error_read_dir.t
t/01-error_read_file.t
t/01-error_write_file.t
t/append_null.t
t/binmode.t
t/data_section.t
t/edit_file.t
t/error.t
t/file_object.t
t/handle.t
t/inode.t
t/large.t
t/lib/FileSlurpTest.pm
t/lib/FileSlurpTestOverride.pm
t/newline.t
t/no_clobber.t
t/original.t
t/paragraph.t
t/perms.t
t/prepend_file.t
t/pseudo.t
t/read_dir.t
t/slurp.t
t/stdin.t
t/stringify.t
t/tainted.t
t/write_file_win32.t
xt/author/00-compile.t
xt/author/eol.t
xt/author/pod-spell.t
xt/author/pod-syntax.t
xt/author/pod_coverage.t
xt/author/test-version.t
@end verbatim


@c .....................................

@node Test FileSlurpTest, FileSlurpTestOverride Code, File-Slurp Tests, About File-Slurp
@subsection Test FileSlurpTest
@cindex @file{File::Slurp} FileSlurpTest code

@need 400
@anchor{FileSlurpTest-pm}
@crindex @r{<@i{Use File-Spec Basename}>}, use
@crindex @r{<@i{Use TWJR Lib}>}, use
@crindex @r{<@i{Test---FileSlurp--FileSlurpTest}>}, use
@cdindex @r{@{@file{FileSlurpTest.pm}@}}, definition
@noindent
@r{@{@file{FileSlurpTest.pm}@}} @equiv{}
@example
@r{<@i{Use File-Spec Basename}>}
@r{<@i{Use TWJR Lib}>}
@r{<@i{Test---FileSlurp--FileSlurpTest}>}
@end example
@iftex
@smallfonts @rm
@end iftex

@noindent
The following table lists called chunk definition points.
@multitable @columnfractions .35 .65
@headitem Chunk name @tab First definition point
@item @r{<@i{Test---FileSlurp--FileSlurpTest}>} @tab See @ref{Test---FileSlurp--FileSlurpTest}.
@item @r{<@i{Use File-Spec Basename}>} @tab See @ref{Use-File-Spec-Basename}.
@item @r{<@i{Use TWJR Lib}>} @tab See @ref{Use-TWJR-Lib}.
@end multitable
@iftex
@textfonts @rm
@end iftex


@need 400
@anchor{Makefile---Applications--Syntax-Checks-Hook-2}
@cdindex @r{<@i{Makefile---Applications--Syntax Checks-Hook}>}, definition
@noindent
@r{<@i{Makefile---Applications--Syntax Checks-Hook}>} +@equiv{}
@example
    @@printf "$@{PURPLEBOLD@}"; perl -c $@{PWD@}/files/t/lib/FileSlurpTest.pm; printf "$@{CLEAR@}";
@end example
@iftex
@smallfonts @rm
@end iftex

@noindent
This chunk is also defined in
@ref{Makefile---Applications--Syntax-Checks-Hook-1},
@ref{Makefile---Applications--Syntax-Checks-Hook-3},
@ref{Makefile---Applications--Syntax-Checks-Hook-4},
@ref{Makefile---Applications--Syntax-Checks-Hook-5},
@ref{Makefile---Applications--Syntax-Checks-Hook-6}, and
@ref{Makefile---Applications--Syntax-Checks-Hook-7}.

@noindent
This chunk is called by @r{<@i{Makefile---Applications--Syntax Checks}>}; see its first definition at @ref{Makefile---Applications--Syntax-Checks}.
@iftex
@textfonts @rm
@end iftex

@c _____________________________________

@menu
* FileSlurpTest Code Body::
@end menu

@node FileSlurpTest Code Body,  , Test FileSlurpTest, Test FileSlurpTest
@subsubsection FileSlurpTest Code Body

@need 400
@anchor{Test---FileSlurp--FileSlurpTest}
@crindex @r{<@i{Use Strict Warnings}>}, use
@cdindex @r{<@i{Test---FileSlurp--FileSlurpTest}>}, definition
@noindent
@r{<@i{Test---FileSlurp--FileSlurpTest}>} @equiv{}
@example
package FileSlurpTest;

@r{<@i{Use Strict Warnings}>}
use Exporter qw(import);
use IO::Handle ();
use File::Spec;
use File::Temp qw(tempfile);

use File::Slurp ();

our @@EXPORT_OK = qw(
    IS_WSL temp_file_path trap_function trap_function_list_context
);

sub IS_WSL() @{
  if ($^O eq 'linux') @{
    require POSIX;
    return 1 if (POSIX::uname())[2] =~ /windows/i;
  @}
@}

sub temp_file_path @{
    my ($pick_nonsense_path) = @@_;

    # older EUMMs turn this on. We don't want to emit warnings.
    # also, some of our CORE function overrides emit warnings. Silence those.
    local $^W;

    my $file;
    if ($pick_nonsense_path) @{
        $file = File::Spec->catfile(File::Spec->tmpdir, 'super', 'bad', 'file-slurp', 'path');
    @}
    else @{
        (undef, $file) = tempfile('tempXXXXX', DIR => File::Spec->tmpdir, OPEN => 0);
    @}
    return $file;
@}

sub trap_function @{
    my ($function, @@args) = @@_;
    my $res;
    my $warn;
    my $err = do @{ # catch
        local $@@;
        local $SIG@{__WARN__@} = sub @{$warn = join '', @@_@};
        eval @{ # try
            $res = $function->(@@args);
            1;
        @};
        $@@;
    @};
    return ($res, $warn, $err);
@}

sub trap_function_list_context @{
    my ($function, @@args) = @@_;
    my @@res;
    my $warn;
    my $err = do @{ # catch
        local $@@;
        local $SIG@{__WARN__@} = sub @{$warn = join '', @@_@};
        eval @{ # try
            @@res = $function->(@@args);
            1;
        @};
        $@@;
    @};
    return (\@@res, $warn, $err);
@}

1;

@end example
@iftex
@smallfonts @rm
@end iftex

@noindent
This chunk is called by @r{@{@file{FileSlurpTest.pm}@}}; see its first definition at @ref{FileSlurpTest-pm}.

@noindent
The called chunk @r{<@i{Use Strict Warnings}>} is first defined at
@ref{Use-Strict-Warnings}.
@iftex
@textfonts @rm
@end iftex


@c .....................................

@node FileSlurpTestOverride Code, Test 00-report-prereqs.dd, Test FileSlurpTest, About File-Slurp
@subsection @file{FileSlurpTestOverride.pm} Code
@file{FileSlurpTestOverride.pm} code

@need 400
@anchor{FileSlurpTestOverride-pm}
@cdindex @r{@{@file{FileSlurpTestOverride.pm}@}}, definition
@noindent
@r{@{@file{FileSlurpTestOverride.pm}@}} @equiv{}
@example
package FileSlurpTestOverride;

use Exporter qw(import);

# older EUMMs turn this on. We don't want to emit warnings.
# also, some of our CORE function overrides emit warnings. Silence those.
local $^W;

BEGIN @{
    *CORE::GLOBAL::rename = sub($$) @{ my ($o, $n) = @@_; CORE::rename($o, $n) @};
    # we only use the 4-arg version of syswrite
    *CORE::GLOBAL::syswrite = sub($$;$$) @{ my ($h, $buff, $l, $o) = @@_; return CORE::syswrite($h, $buff, $l, $o); @};
    # We use the 3 and 4-arg form of sysread.
    *CORE::GLOBAL::sysread = sub($$$;$) @{ my( $h, $b, $s, $o ) = @@_; CORE::sysread $h, $b, $s, $o @};
            # sub($$$;$) @{ my( $h, $b, $s, $o ) = @@_; CORE::sysread $h, $b, $s, $o @} ;
    # We use the 3 and 4-arg form of sysopen
    *CORE::GLOBAL::sysopen = sub($$$;$) @{ my( $h, $n, $m, $p ) = @@_; CORE::sysopen $h, $n, $m, $p @};
    # sub(*$$;$) @{
    #     my ($h, $n, $m, $p) = @@_;
    #     return CORE::sysopen($h, $n, $m, $p) if defined $p;
    #     CORE::sysopen($h, $n, $m);
    # @};
@}


our @@EXPORT_OK = qw(
    trap_function_override_core
);

sub trap_function_override_core @{
    my ($core, $function, @@args) = @@_;

    my $res;
    my $warn;
    my $err = do @{ # catch
        no strict 'refs';
        no warnings;
        local $^W;
        local $@@;
        local $SIG@{__WARN__@} = sub @{$warn = join '', @@_@};
        local *@{"CORE::GLOBAL::$core"@} = sub @{@};
        eval @{ # try
            $res = $function->(@@args);
            1;
        @};
        $@@;
    @};

    return ($res, $warn, $err);
@}

1;

@end example
@iftex
@smallfonts @rm
@end iftex
@iftex
@textfonts @rm
@end iftex


@need 400
@anchor{Makefile---Applications--Syntax-Checks-Hook-3}
@cdindex @r{<@i{Makefile---Applications--Syntax Checks-Hook}>}, definition
@noindent
@r{<@i{Makefile---Applications--Syntax Checks-Hook}>} +@equiv{}
@example
    @@printf "$@{PURPLEBOLD@}"; perl -c $@{PWD@}/files/t/lib/FileSlurpTestOverride.pm; printf "$@{CLEAR@}";
@end example
@iftex
@smallfonts @rm
@end iftex

@noindent
This chunk is also defined in
@ref{Makefile---Applications--Syntax-Checks-Hook-1},
@ref{Makefile---Applications--Syntax-Checks-Hook-2},
@ref{Makefile---Applications--Syntax-Checks-Hook-4},
@ref{Makefile---Applications--Syntax-Checks-Hook-5},
@ref{Makefile---Applications--Syntax-Checks-Hook-6}, and
@ref{Makefile---Applications--Syntax-Checks-Hook-7}.

@noindent
This chunk is called by @r{<@i{Makefile---Applications--Syntax Checks}>}; see its first definition at @ref{Makefile---Applications--Syntax-Checks}.
@iftex
@textfonts @rm
@end iftex


@c .....................................

@node Test 00-report-prereqs.dd, Test 00-report-prereqs.t, FileSlurpTestOverride Code, About File-Slurp
@subsection Test @file{t/00-report-prereqs.dd}
@cindex @file{t/00-report-prereqs.t}

@need 400
@anchor{00-report-prereqs-dd}
@crindex @r{<@i{00-report-prereqs.dd--Body}>}, use
@cdindex @r{@{@file{00-report-prereqs.dd}@}}, definition
@noindent
@r{@{@file{00-report-prereqs.dd}@}} @equiv{}
@example
@r{<@i{00-report-prereqs.dd--Body}>}
@end example
@iftex
@smallfonts @rm
@end iftex

@noindent
The called chunk @r{<@i{00-report-prereqs.dd--Body}>} is first defined at
@ref{00-report-prereqs-dd--Body}.
@iftex
@textfonts @rm
@end iftex

@c _____________________________________

@menu
* 00-report-prereqs.dd Body::
@end menu

@node 00-report-prereqs.dd Body,  , Test 00-report-prereqs.dd, Test 00-report-prereqs.dd
@subsubsection 00-report-prereqs.dd Body

@need 400
@anchor{00-report-prereqs-dd--Body}
@cdindex @r{<@i{00-report-prereqs.dd--Body}>}, definition
@noindent
@r{<@i{00-report-prereqs.dd--Body}>} @equiv{}
@example
do @{ my $x = @{
       'build' => @{
                    'requires' => @{
                                    'ExtUtils::MakeMaker' => '0',
                                  @}
                  @},
       'configure' => @{
                        'requires' => @{
                                        'ExtUtils::MakeMaker' => '0'
                                      @}
                      @},
       'runtime' => @{
                      'requires' => @{
                                      'B' => '0',
                                      'Carp' => '0',
                                      'Errno' => '0',
                                      'Exporter' => '5.57',
                                      'Fcntl' => '0',
                                      'POSIX' => '0',
                                      'strict' => '0',
                                      'warnings' => '0'
                                    @}
                    @},
       'test' => @{
                   'requires' => @{
                                   'Carp' => '0',
                                   'Exporter' => '5.57',
                                   'Fcntl' => '0',
                                   'File::Basename' => '0',
                                   'File::Spec' => '3.01',
                                   'File::Temp' => '0',
                                   'IO::Handle' => '0',
                                   'POSIX' => '0',
                                   'Scalar::Util' => '1.00',
                                   'Socket' => '0',
                                   'Symbol' => '0',
                                   'Test::More' => '0',
                                   'overload' => '0',
                                   'strict' => '0',
                                   'warnings' => '0'
                                 @}
                 @}
     @};
  $x;
 @}

@end example
@iftex
@smallfonts @rm
@end iftex

@noindent
This chunk is called by @r{@{@file{00-report-prereqs.dd}@}}; see its first definition at @ref{00-report-prereqs-dd}.
@iftex
@textfonts @rm
@end iftex



@c .....................................

@node Test 00-report-prereqs.t, Test 01-error_edit_file.t, Test 00-report-prereqs.dd, About File-Slurp
@subsection Test@file{00-report-prereqs.t}
@cindex @file{/00-report-prereqs.t}

@need 400
@anchor{00-report-prereqs-t}
@crindex @r{<@i{00-report-prereqs.t---Body}>}, use
@cdindex @r{@{@file{00-report-prereqs.t}@}}, definition
@noindent
@r{@{@file{00-report-prereqs.t}@}} @equiv{}
@example
@r{<@i{00-report-prereqs.t---Body}>}
@end example
@iftex
@smallfonts @rm
@end iftex

@noindent
The called chunk @r{<@i{00-report-prereqs.t---Body}>} is first defined at
@ref{00-report-prereqs-t---Body}.
@iftex
@textfonts @rm
@end iftex

@c _____________________________________

@menu
* 00-report-prereqs.t Body::
@end menu

@node 00-report-prereqs.t Body,  , Test 00-report-prereqs.t, Test 00-report-prereqs.t
@subsubsection @file{00-report-prereqs.t} Body
@cindex @file{00-report-prereqs.t}

@need 400
@anchor{00-report-prereqs-t---Body}
@crindex @r{<@i{Use Strict Warnings}>}, use
@cdindex @r{<@i{00-report-prereqs.t---Body}>}, definition
@noindent
@r{<@i{00-report-prereqs.t---Body}>} @equiv{}
@example
#!perl

@r{<@i{Use Strict Warnings}>}

# This test was generated by Dist::Zilla::Plugin::Test::ReportPrereqs 0.027

use Test::More tests => 1;

use ExtUtils::MakeMaker;
use File::Spec;

# from $version::LAX
my $lax_version_re =
    qr/(?: undef | (?: (?:[0-9]+) (?: \. | (?:\.[0-9]+) (?:_[0-9]+)? )?
            |
            (?:\.[0-9]+) (?:_[0-9]+)?
        ) | (?:
            v (?:[0-9]+) (?: (?:\.[0-9]+)+ (?:_[0-9]+)? )?
            |
            (?:[0-9]+)? (?:\.[0-9]+)@{2,@} (?:_[0-9]+)?
        )
    )/x;

# hide optional CPAN::Meta modules from prereq scanner
# and check if they are available
my $cpan_meta = "CPAN::Meta";
my $cpan_meta_pre = "CPAN::Meta::Prereqs";
my $HAS_CPAN_META = eval "require $cpan_meta; $cpan_meta->VERSION('2.120900')" && eval "require $cpan_meta_pre"; ## no critic

# Verify requirements?
my $DO_VERIFY_PREREQS = 1;

sub _max @{
    my $max = shift;
    $max = ( $_ > $max ) ? $_ : $max for @@_;
    return $max;
@}

sub _merge_prereqs @{
    my ($collector, $prereqs) = @@_;

    # CPAN::Meta::Prereqs object
    if (ref $collector eq $cpan_meta_pre) @{
        return $collector->with_merged_prereqs(
            CPAN::Meta::Prereqs->new( $prereqs )
        );
    @}

    # Raw hashrefs
    for my $phase ( keys %$prereqs ) @{
        for my $type ( keys %@{ $prereqs->@{$phase@} @} ) @{
            for my $module ( keys %@{ $prereqs->@{$phase@}@{$type@} @} ) @{
                $collector->@{$phase@}@{$type@}@{$module@} = $prereqs->@{$phase@}@{$type@}@{$module@};
            @}
        @}
    @}

    return $collector;
@}

my @@include = qw(

);

my @@exclude = qw(

);

# Add static prereqs to the included modules list
my $static_prereqs = do './t/00-report-prereqs.dd';

# Merge all prereqs (either with ::Prereqs or a hashref)
my $full_prereqs = _merge_prereqs(
    ( $HAS_CPAN_META ? $cpan_meta_pre->new : @{@} ),
    $static_prereqs
);

# Add dynamic prereqs to the included modules list (if we can)
my ($source) = grep @{ -f @} 'MYMETA.json', 'MYMETA.yml';
my $cpan_meta_error;
if ( $source && $HAS_CPAN_META
    && (my $meta = eval @{ CPAN::Meta->load_file($source) @} )
) @{
    $full_prereqs = _merge_prereqs($full_prereqs, $meta->prereqs);
@}
else @{
    $cpan_meta_error = $@@;    # capture error from CPAN::Meta->load_file($source)
    $source = 'static metadata';
@}

my @@full_reports;
my @@dep_errors;
my $req_hash = $HAS_CPAN_META ? $full_prereqs->as_string_hash : $full_prereqs;

# Add static includes into a fake section
for my $mod (@@include) @{
    $req_hash->@{other@}@{modules@}@{$mod@} = 0;
@}

for my $phase ( qw(configure build test runtime develop other) ) @{
    next unless $req_hash->@{$phase@};
    next if ($phase eq 'develop' and not $ENV@{AUTHOR_TESTING@});

    for my $type ( qw(requires recommends suggests conflicts modules) ) @{
        next unless $req_hash->@{$phase@}@{$type@};

        my $title = ucfirst($phase).' '.ucfirst($type);
        my @@reports = [qw/Module Want Have/];

        for my $mod ( sort keys %@{ $req_hash->@{$phase@}@{$type@} @} ) @{
            next if $mod eq 'perl';
            next if grep @{ $_ eq $mod @} @@exclude;

            my $file = $mod;
            $file =~ s@{::@}@{/@}g;
            $file .= ".pm";
            my ($prefix) = grep @{ -e File::Spec->catfile($_, $file) @} @@INC;

            my $want = $req_hash->@{$phase@}@{$type@}@{$mod@};
            $want = "undef" unless defined $want;
            $want = "any" if !$want && $want == 0;

            my $req_string = $want eq 'any' ? 'any version required' : "version '$want' required";

            if ($prefix) @{
                my $have = MM->parse_version( File::Spec->catfile($prefix, $file) );
                $have = "undef" unless defined $have;
                push @@reports, [$mod, $want, $have];

                if ( $DO_VERIFY_PREREQS && $HAS_CPAN_META && $type eq 'requires' ) @{
                    if ( $have !~ /\A$lax_version_re\z/ ) @{
                        push @@dep_errors, "$mod version '$have' cannot be parsed ($req_string)";
                    @}
                    elsif ( ! $full_prereqs->requirements_for( $phase, $type )->accepts_module( $mod => $have ) ) @{
                        push @@dep_errors, "$mod version '$have' is not in required range '$want'";
                    @}
                @}
            @}
            else @{
                push @@reports, [$mod, $want, "missing"];

                if ( $DO_VERIFY_PREREQS && $type eq 'requires' ) @{
                    push @@dep_errors, "$mod is not installed ($req_string)";
                @}
            @}
        @}

        if ( @@reports ) @{
            push @@full_reports, "=== $title ===\n\n";

            my $ml = _max( map @{ length $_->[0] @} @@reports );
            my $wl = _max( map @{ length $_->[1] @} @@reports );
            my $hl = _max( map @{ length $_->[2] @} @@reports );

            if ($type eq 'modules') @{
                splice @@reports, 1, 0, ["-" x $ml, "", "-" x $hl];
                push @@full_reports, map @{ sprintf("    %*s %*s\n", -$ml, $_->[0], $hl, $_->[2]) @} @@reports;
            @}
            else @{
                splice @@reports, 1, 0, ["-" x $ml, "-" x $wl, "-" x $hl];
                push @@full_reports, map @{ sprintf("    %*s %*s %*s\n", -$ml, $_->[0], $wl, $_->[1], $hl, $_->[2]) @} @@reports;
            @}

            push @@full_reports, "\n";
        @}
    @}
@}

if ( @@full_reports ) @{
    diag "\nVersions for all modules listed in $source (including optional ones):\n\n", @@full_reports;
@}

if ( $cpan_meta_error || @@dep_errors ) @{
    diag "\n*** WARNING WARNING WARNING WARNING WARNING WARNING WARNING WARNING ***\n";
@}

if ( $cpan_meta_error ) @{
    my ($orig_source) = grep @{ -f @} 'MYMETA.json', 'MYMETA.yml';
    diag "\nCPAN::Meta->load_file('$orig_source') failed with: $cpan_meta_error\n";
@}

if ( @@dep_errors ) @{
    diag join("\n",
        "\nThe following REQUIRED prerequisites were not satisfied:\n",
        @@dep_errors,
        "\n"
    );
@}

pass;

# vim: ts=4 sts=4 sw=4 et:

@end example
@iftex
@smallfonts @rm
@end iftex

@noindent
This chunk is called by @r{@{@file{00-report-prereqs.t}@}}; see its first definition at @ref{00-report-prereqs-t}.

@noindent
The called chunk @r{<@i{Use Strict Warnings}>} is first defined at
@ref{Use-Strict-Warnings}.
@iftex
@textfonts @rm
@end iftex



@c .....................................

@node Test 01-error_edit_file.t, 01-error_edit_file_lines.t Test, Test 00-report-prereqs.t, About File-Slurp
@subsection Test @file{01-error_edit_file.t}
@cindex @file{01-error_edit_file.t}

@need 400
@anchor{01-error-edit-file-t}
@crindex @r{<@i{Use Strict Warnings}>}, use
@crindex @r{<@i{Use File-Spec Basename}>}, use
@crindex @r{<@i{Use TWJR Lib}>}, use
@crindex @r{<@i{01-error_edit_file.t---Body}>}, use
@cdindex @r{@{@file{01-error_edit_file.t}@}}, definition
@noindent
@r{@{@file{01-error_edit_file.t}@}} @equiv{}
@example
@r{<@i{Use Strict Warnings}>}
@r{<@i{Use File-Spec Basename}>}
@r{<@i{Use TWJR Lib}>}

@r{<@i{01-error_edit_file.t---Body}>}

@end example
@iftex
@smallfonts @rm
@end iftex

@noindent
The following table lists called chunk definition points.
@multitable @columnfractions .35 .65
@headitem Chunk name @tab First definition point
@item @r{<@i{01-error_edit_file.t---Body}>} @tab See @ref{01-error-edit-file-t---Body}.
@item @r{<@i{Use File-Spec Basename}>} @tab See @ref{Use-File-Spec-Basename}.
@item @r{<@i{Use Strict Warnings}>} @tab See @ref{Use-Strict-Warnings}.
@item @r{<@i{Use TWJR Lib}>} @tab See @ref{Use-TWJR-Lib}.
@end multitable
@iftex
@textfonts @rm
@end iftex


@need 400
@anchor{Makefile---Applications--Syntax-Checks-Hook-4}
@cdindex @r{<@i{Makefile---Applications--Syntax Checks-Hook}>}, definition
@noindent
@r{<@i{Makefile---Applications--Syntax Checks-Hook}>} +@equiv{}
@example
    @@printf "$@{PURPLEBOLD@}"; perl -c $@{PWD@}/files/t/01-error_edit_file.t; printf "$@{CLEAR@}";
@end example
@iftex
@smallfonts @rm
@end iftex

@noindent
This chunk is also defined in
@ref{Makefile---Applications--Syntax-Checks-Hook-1},
@ref{Makefile---Applications--Syntax-Checks-Hook-2},
@ref{Makefile---Applications--Syntax-Checks-Hook-3},
@ref{Makefile---Applications--Syntax-Checks-Hook-5},
@ref{Makefile---Applications--Syntax-Checks-Hook-6}, and
@ref{Makefile---Applications--Syntax-Checks-Hook-7}.

@noindent
This chunk is called by @r{<@i{Makefile---Applications--Syntax Checks}>}; see its first definition at @ref{Makefile---Applications--Syntax-Checks}.
@iftex
@textfonts @rm
@end iftex


@c _____________________________________

@menu
* 01-error_edit_file.t Body::
* 01-error_edit_file.t---Body--Use::
* 01-error_edit_file.t---Body--Plan Tests::
* 01-error_edit_file.t---Body--Edit File Error::
* 01-error_edit_file.t---Body--# of Error::
@end menu

@node 01-error_edit_file.t Body, 01-error_edit_file.t---Body--Use, Test 01-error_edit_file.t, Test 01-error_edit_file.t
@subsubsection @file{01-error_edit_file.t} Body
@cindex @file{01-error_edit_file.t} Body

@need 400
@anchor{01-error-edit-file-t---Body}
@crindex @r{<@i{01-error_edit_file.t---Body--Use}>}, use
@crindex @r{<@i{01-error_edit_file.t---Body--Plan Tests}>}, use
@crindex @r{<@i{01-error_edit_file.t---Body--Edit File Error}>}, use
@crindex @r{<@i{01-error_edit_file.t---Body--# of Error}>}, use
@cdindex @r{<@i{01-error_edit_file.t---Body}>}, definition
@noindent
@r{<@i{01-error_edit_file.t---Body}>} @equiv{}
@example
@r{<@i{01-error_edit_file.t---Body--Use}>}
use File::Slurp qw(ef edit_file);
@r{<@i{01-error_edit_file.t---Body--Plan Tests}>}

# edit_file errors
@{
  @r{<@i{01-error_edit_file.t---Body--Edit File Error}>}
@}

# ef errors
@{
  @r{<@i{01-error_edit_file.t---Body--# of Error}>}
@}

@end example
@iftex
@smallfonts @rm
@end iftex

@noindent
This chunk is called by @r{@{@file{01-error_edit_file.t}@}}; see its first definition at @ref{01-error-edit-file-t}.

@noindent
The following table lists called chunk definition points.
@multitable @columnfractions .35 .65
@headitem Chunk name @tab First definition point
@item @r{<@i{01-error_edit_file.t---Body--# of Error}>} @tab See @ref{01-error-edit-file-t---Body----of-Error}.
@item @r{<@i{01-error_edit_file.t---Body--Edit File Error}>} @tab See @ref{01-error-edit-file-t---Body--Edit-File-Error}.
@item @r{<@i{01-error_edit_file.t---Body--Plan Tests}>} @tab See @ref{01-error-edit-file-t---Body--Plan-Tests}.
@item @r{<@i{01-error_edit_file.t---Body--Use}>} @tab See @ref{01-error-edit-file-t---Body--Use}.
@end multitable
@iftex
@textfonts @rm
@end iftex

@c _____________________________________

@node 01-error_edit_file.t---Body--Use, 01-error_edit_file.t---Body--Plan Tests, 01-error_edit_file.t Body, Test 01-error_edit_file.t
@subsubsection 01-error_edit_file.t---Body--Use

@need 400
@anchor{01-error-edit-file-t---Body--Use}
@cdindex @r{<@i{01-error_edit_file.t---Body--Use}>}, definition
@noindent
@r{<@i{01-error_edit_file.t---Body--Use}>} @equiv{}
@example
use File::Basename ();
use lib (File::Spec->catdir(File::Spec->rel2abs(File::Basename::dirname(__FILE__)), 'lib'));
use FileSlurpTest qw(temp_file_path trap_function);

# both of these names are synonyms
use Test::More;

@end example
@iftex
@smallfonts @rm
@end iftex

@noindent
This chunk is called by the following chunks:

@multitable @columnfractions .35 .65
@headitem Chunk name @tab First definition point
@item @r{<@i{01-error_edit_file.t---Body}>} @tab See @ref{01-error-edit-file-t---Body}.
@item @r{@{@file{01-error_edit_file_lines.t}@}} @tab See @ref{01-error-edit-file-lines-t}.
@end multitable
@iftex
@textfonts @rm
@end iftex

@c _____________________________________

@node 01-error_edit_file.t---Body--Plan Tests, 01-error_edit_file.t---Body--Edit File Error, 01-error_edit_file.t---Body--Use, Test 01-error_edit_file.t
@subsubsection 01-error_edit_file.t---Body--Plan Tests

@need 400
@anchor{01-error-edit-file-t---Body--Plan-Tests}
@cdindex @r{<@i{01-error_edit_file.t---Body--Plan Tests}>}, definition
@noindent
@r{<@i{01-error_edit_file.t---Body--Plan Tests}>} @equiv{}
@example
plan tests => 18;

# this one intentionally doesn't exist on a couple of paths. can't be created.
my $file = temp_file_path('gimme a nonexistent path');

@end example
@iftex
@smallfonts @rm
@end iftex

@noindent
This chunk is called by the following chunks:

@multitable @columnfractions .35 .65
@headitem Chunk name @tab First definition point
@item @r{<@i{01-error_edit_file.t---Body}>} @tab See @ref{01-error-edit-file-t---Body}.
@item @r{@{@file{01-error_edit_file_lines.t}@}} @tab See @ref{01-error-edit-file-lines-t}.
@end multitable
@iftex
@textfonts @rm
@end iftex


@c _____________________________________

@node 01-error_edit_file.t---Body--Edit File Error, 01-error_edit_file.t---Body--# of Error, 01-error_edit_file.t---Body--Plan Tests, Test 01-error_edit_file.t
@subsubsection 01-error_edit_file.t---Body--Edit File Error


@need 400
@anchor{01-error-edit-file-t---Body--Edit-File-Error}
@cdindex @r{<@i{01-error_edit_file.t---Body--Edit File Error}>}, definition
@noindent
@r{<@i{01-error_edit_file.t---Body--Edit File Error}>} @equiv{}
@example
my ($res, $warn, $err) = trap_function(\&edit_file, sub @{ s/foo/bar/g @}, $file, @{err_mode => 'quiet'@});
ok(!$warn, 'edit_file: err_mode opt quiet - no warn!');
ok(!$err, 'edit_file: err_mode opt quiet - no exception!');
ok(!$res, 'edit_file: err_mode opt quiet - no content!');
($res, $warn, $err) = trap_function(\&edit_file, sub @{ s/foo/bar/g @}, $file, @{err_mode => 'carp'@});
ok($warn, 'edit_file: err_mode opt carp - got warn!');
ok(!$err, 'edit_file: err_mode opt carp - no exception!');
ok(!$res, 'edit_file: err_mode opt carp - no content!');
($res, $warn, $err) = trap_function(\&edit_file, sub @{ s/foo/bar/g @}, $file, @{err_mode => 'croak'@});
ok(!$warn, 'edit_file: err_mode opt croak - no warn!');
ok($err, 'edit_file: err_mode opt croak - got exception!');
ok(!$res, 'edit_file: err_mode opt croak - no content!');
@end example
@iftex
@smallfonts @rm
@end iftex

@noindent
This chunk is called by the following chunks:

@multitable @columnfractions .35 .65
@headitem Chunk name @tab First definition point
@item @r{<@i{01-error_edit_file.t---Body}>} @tab See @ref{01-error-edit-file-t---Body}.
@item @r{@{@file{01-error_edit_file_lines.t}@}} @tab See @ref{01-error-edit-file-lines-t}.
@end multitable
@iftex
@textfonts @rm
@end iftex

@c _____________________________________

@node 01-error_edit_file.t---Body--# of Error,  , 01-error_edit_file.t---Body--Edit File Error, Test 01-error_edit_file.t
@subsubsection 01-error_edit_file.t---Body--# of Error

@need 400
@anchor{01-error-edit-file-t---Body----of-Error}
@cdindex @r{<@i{01-error_edit_file.t---Body--# of Error}>}, definition
@noindent
@r{<@i{01-error_edit_file.t---Body--# of Error}>} @equiv{}
@example
my ($res, $warn, $err) = trap_function(\&ef, sub @{ s/foo/bar/g @}, $file, @{err_mode => 'quiet'@});
ok(!$warn, 'ef: err_mode opt quiet - no warn!');
ok(!$err, 'ef: err_mode opt quiet - no exception!');
ok(!$res, 'ef: err_mode opt quiet - no content!');
($res, $warn, $err) = trap_function(\&ef, sub @{ s/foo/bar/g @}, $file, @{err_mode => 'carp'@});
ok($warn, 'ef: err_mode opt carp - got warn!');
ok(!$err, 'ef: err_mode opt carp - no exception!');
ok(!$res, 'ef: err_mode opt carp - no content!');
($res, $warn, $err) = trap_function(\&ef, sub @{ s/foo/bar/g @}, $file, @{err_mode => 'croak'@});
ok(!$warn, 'ef: err_mode opt croak - no warn!');
ok($err, 'ef: err_mode opt croak - got exception!');
ok(!$res, 'ef: err_mode opt croak - no content!');

@end example
@iftex
@smallfonts @rm
@end iftex

@noindent
This chunk is called by the following chunks:

@multitable @columnfractions .35 .65
@headitem Chunk name @tab First definition point
@item @r{<@i{01-error_edit_file.t---Body}>} @tab See @ref{01-error-edit-file-t---Body}.
@item @r{@{@file{01-error_edit_file_lines.t}@}} @tab See @ref{01-error-edit-file-lines-t}.
@end multitable
@iftex
@textfonts @rm
@end iftex


@c .....................................

@node 01-error_edit_file_lines.t Test, 01-error_prepend_file.t Test, Test 01-error_edit_file.t, About File-Slurp
@subsection @file{01-error_edit_file_lines.t} Test
@cindex @file{01-error_edit_file_lines.t} test

@need 400
@anchor{01-error-edit-file-lines-t}
@crindex @r{<@i{Use Strict Warnings}>}, use
@crindex @r{<@i{Use File-Spec Basename}>}, use
@crindex @r{<@i{Use TWJR Lib}>}, use
@crindex @r{<@i{01-error_edit_file.t---Body--Use}>}, use
@crindex @r{<@i{01-error_edit_file.t---Body--Plan Tests}>}, use
@crindex @r{<@i{01-error_edit_file.t---Body--Edit File Error}>}, use
@crindex @r{<@i{01-error_edit_file.t---Body--# of Error}>}, use
@cdindex @r{@{@file{01-error_edit_file_lines.t}@}}, definition
@noindent
@r{@{@file{01-error_edit_file_lines.t}@}} @equiv{}
@example
@r{<@i{Use Strict Warnings}>}
@r{<@i{Use File-Spec Basename}>}
@r{<@i{Use TWJR Lib}>}

@r{<@i{01-error_edit_file.t---Body--Use}>}
use File::Slurp qw(ef edit_file);

@r{<@i{01-error_edit_file.t---Body--Plan Tests}>}

# edit_file_lines errors
@{
  @r{<@i{01-error_edit_file.t---Body--Edit File Error}>}
@}

# efl errors
@{
  @r{<@i{01-error_edit_file.t---Body--# of Error}>}
@}

@end example
@iftex
@smallfonts @rm
@end iftex

@noindent
The following table lists called chunk definition points.
@multitable @columnfractions .35 .65
@headitem Chunk name @tab First definition point
@item @r{<@i{01-error_edit_file.t---Body--# of Error}>} @tab See @ref{01-error-edit-file-t---Body----of-Error}.
@item @r{<@i{01-error_edit_file.t---Body--Edit File Error}>} @tab See @ref{01-error-edit-file-t---Body--Edit-File-Error}.
@item @r{<@i{01-error_edit_file.t---Body--Plan Tests}>} @tab See @ref{01-error-edit-file-t---Body--Plan-Tests}.
@item @r{<@i{01-error_edit_file.t---Body--Use}>} @tab See @ref{01-error-edit-file-t---Body--Use}.
@item @r{<@i{Use File-Spec Basename}>} @tab See @ref{Use-File-Spec-Basename}.
@item @r{<@i{Use Strict Warnings}>} @tab See @ref{Use-Strict-Warnings}.
@item @r{<@i{Use TWJR Lib}>} @tab See @ref{Use-TWJR-Lib}.
@end multitable
@iftex
@textfonts @rm
@end iftex


@need 400
@anchor{Makefile---Applications--Syntax-Checks-Hook-5}
@cdindex @r{<@i{Makefile---Applications--Syntax Checks-Hook}>}, definition
@noindent
@r{<@i{Makefile---Applications--Syntax Checks-Hook}>} +@equiv{}
@example
    @@printf "$@{PURPLEBOLD@}"; perl -c $@{PWD@}/files/t/01-error_edit_file_lines.t; printf "$@{CLEAR@}";
@end example
@iftex
@smallfonts @rm
@end iftex

@noindent
This chunk is also defined in
@ref{Makefile---Applications--Syntax-Checks-Hook-1},
@ref{Makefile---Applications--Syntax-Checks-Hook-2},
@ref{Makefile---Applications--Syntax-Checks-Hook-3},
@ref{Makefile---Applications--Syntax-Checks-Hook-4},
@ref{Makefile---Applications--Syntax-Checks-Hook-6}, and
@ref{Makefile---Applications--Syntax-Checks-Hook-7}.

@noindent
This chunk is called by @r{<@i{Makefile---Applications--Syntax Checks}>}; see its first definition at @ref{Makefile---Applications--Syntax-Checks}.
@iftex
@textfonts @rm
@end iftex


@c .....................................

@node 01-error_prepend_file.t Test, edit_file.t Test, 01-error_edit_file_lines.t Test, About File-Slurp
@subsection @file{01-error_prepend_file.t} Test
@cindex @file{01-error_prepend_file.t} test

@need 400
@anchor{01-error-prepend-file-t}
@crindex @r{<@i{Use Strict Warnings}>}, use
@crindex @r{<@i{Use File-Spec Basename}>}, use
@crindex @r{<@i{Use TWJR Lib}>}, use
@crindex @r{<@i{01-error_prepend_file.t---Body}>}, use
@cdindex @r{@{@file{01-error_prepend_file.t}@}}, definition
@noindent
@r{@{@file{01-error_prepend_file.t}@}} @equiv{}
@example
@r{<@i{Use Strict Warnings}>}
@r{<@i{Use File-Spec Basename}>}
@r{<@i{Use TWJR Lib}>}
@r{<@i{01-error_prepend_file.t---Body}>}
@end example
@iftex
@smallfonts @rm
@end iftex

@noindent
The following table lists called chunk definition points.
@multitable @columnfractions .35 .65
@headitem Chunk name @tab First definition point
@item @r{<@i{01-error_prepend_file.t---Body}>} @tab See @ref{01-error-prepend-file-t---Body}.
@item @r{<@i{Use File-Spec Basename}>} @tab See @ref{Use-File-Spec-Basename}.
@item @r{<@i{Use Strict Warnings}>} @tab See @ref{Use-Strict-Warnings}.
@item @r{<@i{Use TWJR Lib}>} @tab See @ref{Use-TWJR-Lib}.
@end multitable
@iftex
@textfonts @rm
@end iftex


@need 400
@anchor{Makefile---Applications--Syntax-Checks-Hook-6}
@cdindex @r{<@i{Makefile---Applications--Syntax Checks-Hook}>}, definition
@noindent
@r{<@i{Makefile---Applications--Syntax Checks-Hook}>} +@equiv{}
@example
    @@printf "$@{PURPLEBOLD@}"; perl -c $@{PWD@}/files/t/01-error_prepend_file.t; printf "$@{CLEAR@}";
@end example
@iftex
@smallfonts @rm
@end iftex

@noindent
This chunk is also defined in
@ref{Makefile---Applications--Syntax-Checks-Hook-1},
@ref{Makefile---Applications--Syntax-Checks-Hook-2},
@ref{Makefile---Applications--Syntax-Checks-Hook-3},
@ref{Makefile---Applications--Syntax-Checks-Hook-4},
@ref{Makefile---Applications--Syntax-Checks-Hook-5}, and
@ref{Makefile---Applications--Syntax-Checks-Hook-7}.

@noindent
This chunk is called by @r{<@i{Makefile---Applications--Syntax Checks}>}; see its first definition at @ref{Makefile---Applications--Syntax-Checks}.
@iftex
@textfonts @rm
@end iftex

@c _____________________________________

@menu
* 01-error_prepend_file.t---Body Code::
* 01-error_prepend_file.t---Body--Use Code::
* 01-error_prepend_file.t---Body--Test-More Code::
* 01-error_prepend_file.t---Body--Warnings Off Code::
* 01-error_prepend_file.t---Body--Tests Code::
* 01-error_prepend_file.t---Step 1 Code::
* 01-error_prepend_file.t---Step 2 Code::
* 01-error_prepend_file.t---Step 3 Code::
@end menu

@node 01-error_prepend_file.t---Body Code, 01-error_prepend_file.t---Body--Use Code, 01-error_prepend_file.t Test, 01-error_prepend_file.t Test
@subsubsection 01-error_prepend_file.t---Body Code

@need 400
@anchor{01-error-prepend-file-t---Body}
@crindex @r{<@i{01-error_prepend_file.t---Body--Use}>}, use
@crindex @r{<@i{01-error_prepend_file.t---Body--Test-More}>}, use
@crindex @r{<@i{01-error_prepend_file.t---Body--Warnings Off}>}, use
@crindex @r{<@i{01-error_prepend_file.t---Body--Tests}>}, use
@cdindex @r{<@i{01-error_prepend_file.t---Body}>}, definition
@noindent
@r{<@i{01-error_prepend_file.t---Body}>} @equiv{}
@example
@r{<@i{01-error_prepend_file.t---Body--Use}>}
@r{<@i{01-error_prepend_file.t---Body--Test-More}>}
@r{<@i{01-error_prepend_file.t---Body--Warnings Off}>}
@r{<@i{01-error_prepend_file.t---Body--Tests}>}
@end example
@iftex
@smallfonts @rm
@end iftex

@noindent
This chunk is called by @r{@{@file{01-error_prepend_file.t}@}}; see its first definition at @ref{01-error-prepend-file-t}.

@noindent
The following table lists called chunk definition points.
@multitable @columnfractions .35 .65
@headitem Chunk name @tab First definition point
@item @r{<@i{01-error_prepend_file.t---Body--Test-More}>} @tab See @ref{01-error-prepend-file-t---Body--Test-More}.
@item @r{<@i{01-error_prepend_file.t---Body--Tests}>} @tab See @ref{01-error-prepend-file-t---Body--Tests}.
@item @r{<@i{01-error_prepend_file.t---Body--Use}>} @tab See @ref{01-error-prepend-file-t---Body--Use}.
@item @r{<@i{01-error_prepend_file.t---Body--Warnings Off}>} @tab See @ref{01-error-prepend-file-t---Body--Warnings-Off}.
@end multitable
@iftex
@textfonts @rm
@end iftex

@c _____________________________________

@node 01-error_prepend_file.t---Body--Use Code, 01-error_prepend_file.t---Body--Test-More Code, 01-error_prepend_file.t---Body Code, 01-error_prepend_file.t Test
@subsubsection 01-error_prepend_file.t---Body--Use Code

@need 400
@anchor{01-error-prepend-file-t---Body--Use}
@cdindex @r{<@i{01-error_prepend_file.t---Body--Use}>}, definition
@noindent
@r{<@i{01-error_prepend_file.t---Body--Use}>} @equiv{}
@example
use lib File::Spec->catdir(File::Spec->rel2abs(File::Basename::dirname(__FILE__)), 'lib');
use FileSlurpTestOverride qw(trap_function_override_core);
use FileSlurpTest qw(temp_file_path trap_function);

use File::Slurp qw(prepend_file);

@end example
@iftex
@smallfonts @rm
@end iftex

@noindent
This chunk is called by @r{<@i{01-error_prepend_file.t---Body}>}; see its first definition at @ref{01-error-prepend-file-t---Body}.
@iftex
@textfonts @rm
@end iftex

@c _____________________________________

@node 01-error_prepend_file.t---Body--Test-More Code, 01-error_prepend_file.t---Body--Warnings Off Code, 01-error_prepend_file.t---Body--Use Code, 01-error_prepend_file.t Test
@subsubsection 01-error_prepend_file.t---Body--Test-More Code

@need 400
@anchor{01-error-prepend-file-t---Body--Test-More}
@cdindex @r{<@i{01-error_prepend_file.t---Body--Test-More}>}, definition
@noindent
@r{<@i{01-error_prepend_file.t---Body--Test-More}>} @equiv{}
@example
use Test::More;

plan tests => 27;

@end example
@iftex
@smallfonts @rm
@end iftex

@noindent
This chunk is called by @r{<@i{01-error_prepend_file.t---Body}>}; see its first definition at @ref{01-error-prepend-file-t---Body}.
@iftex
@textfonts @rm
@end iftex

@c _____________________________________

@node 01-error_prepend_file.t---Body--Warnings Off Code, 01-error_prepend_file.t---Body--Tests Code, 01-error_prepend_file.t---Body--Test-More Code, 01-error_prepend_file.t Test
@subsubsection 01-error_prepend_file.t---Body--Warnings Off Code

@need 400
@anchor{01-error-prepend-file-t---Body--Warnings-Off}
@cdindex @r{<@i{01-error_prepend_file.t---Body--Warnings Off}>}, definition
@noindent
@r{<@i{01-error_prepend_file.t---Body--Warnings Off}>} @equiv{}
@example
# older EUMMs turn this on. We don't want to emit warnings.
# also, some of our CORE function overrides emit warnings. Silence those.
local $^W;

@end example
@iftex
@smallfonts @rm
@end iftex

@noindent
This chunk is called by @r{<@i{01-error_prepend_file.t---Body}>}; see its first definition at @ref{01-error-prepend-file-t---Body}.
@iftex
@textfonts @rm
@end iftex

@c _____________________________________

@node 01-error_prepend_file.t---Body--Tests Code, 01-error_prepend_file.t---Step 1 Code, 01-error_prepend_file.t---Body--Warnings Off Code, 01-error_prepend_file.t Test
@subsubsection 01-error_prepend_file.t---Body--Tests Code

@need 400
@anchor{01-error-prepend-file-t---Body--Tests}
@crindex @r{<@i{01-error_prepend_file.t---Step 1}>}, use
@crindex @r{<@i{01-error_prepend_file.t---Step 2}>}, use
@crindex @r{<@i{01-error_prepend_file.t---Step 3}>}, use
@cdindex @r{<@i{01-error_prepend_file.t---Body--Tests}>}, definition
@noindent
@r{<@i{01-error_prepend_file.t---Body--Tests}>} @equiv{}
@example
# prepend_file reads in a file, edits the contents, writes the new file
# atomically to "foo.$$" then renames "foo.$$" to the original "foo"
# this leaves many failure steps to tend to

@r{<@i{01-error_prepend_file.t---Step 1}>}
@r{<@i{01-error_prepend_file.t---Step 2}>}
@r{<@i{01-error_prepend_file.t---Step 3}>}

@end example
@iftex
@smallfonts @rm
@end iftex

@noindent
This chunk is called by @r{<@i{01-error_prepend_file.t---Body}>}; see its first definition at @ref{01-error-prepend-file-t---Body}.

@noindent
The following table lists called chunk definition points.
@multitable @columnfractions .35 .65
@headitem Chunk name @tab First definition point
@item @r{<@i{01-error_prepend_file.t---Step 1}>} @tab See @ref{01-error-prepend-file-t---Step-1}.
@item @r{<@i{01-error_prepend_file.t---Step 2}>} @tab See @ref{01-error-prepend-file-t---Step-2}.
@item @r{<@i{01-error_prepend_file.t---Step 3}>} @tab See @ref{01-error-prepend-file-t---Step-3}.
@end multitable
@iftex
@textfonts @rm
@end iftex

@c _____________________________________

@node 01-error_prepend_file.t---Step 1 Code, 01-error_prepend_file.t---Step 2 Code, 01-error_prepend_file.t---Body--Tests Code, 01-error_prepend_file.t Test
@subsubsection 01-error_prepend_file.t---Step 1

@need 400
@anchor{01-error-prepend-file-t---Step-1}
@cdindex @r{<@i{01-error_prepend_file.t---Step 1}>}, definition
@noindent
@r{<@i{01-error_prepend_file.t---Step 1}>} @equiv{}
@example
# step 1: read in the file. error simulated by asking it to read-in a
# nonexistent file
@{
    # this one intentionally doesn't exist on a couple of paths. can't be created.
    my $file = temp_file_path('gimme a nonexistent path');
    my ($res, $warn, $err) = trap_function(\&prepend_file, $file, @{err_mode => 'quiet'@}, 'junk');
    ok(!$warn, 'prepend_file: read: err_mode opt quiet - no warn!');
    ok(!$err, 'prepend_file: read: err_mode opt quiet - no exception!');
    ok(!$res, 'prepend_file: read: err_mode opt quiet - no content!');
    ($res, $warn, $err) = trap_function(\&prepend_file, $file, @{err_mode => 'carp'@}, 'junk');
    like($warn, qr/read_file/, 'prepend_file: read: err_mode opt carp - got warn!');
    ok(!$err, 'prepend_file: read: err_mode opt carp - no exception!');
    ok(!$res, 'prepend_file: read: err_mode opt carp - no content!');
    ($res, $warn, $err) = trap_function(\&prepend_file, $file, @{err_mode => 'croak'@}, 'junk');
    ok(!$warn, 'prepend_file: read: err_mode opt croak - no warn!');
    like($err, qr/read_file/, 'prepend_file: read: err_mode opt croak - got exception!');
    ok(!$res, 'prepend_file: read: err_mode opt croak - no content!');
@}
@end example
@iftex
@smallfonts @rm
@end iftex

@noindent
This chunk is called by @r{<@i{01-error_prepend_file.t---Body--Tests}>}; see its first definition at @ref{01-error-prepend-file-t---Body--Tests}.
@iftex
@textfonts @rm
@end iftex

@c _____________________________________

@node 01-error_prepend_file.t---Step 2 Code, 01-error_prepend_file.t---Step 3 Code, 01-error_prepend_file.t---Step 1 Code, 01-error_prepend_file.t Test
@subsubsection 01-error_prepend_file.t---Step 2

@need 400
@anchor{01-error-prepend-file-t---Step-2}
@cdindex @r{<@i{01-error_prepend_file.t---Step 2}>}, definition
@noindent
@r{<@i{01-error_prepend_file.t---Step 2}>} @equiv{}
@example
# step 2: Allow step 1 to pass, then write out the newly altered contents to a
# a file called "foo.$$". This write will fail by simulating a problem with
# CORE::GLOBAL::syswrite
@{
    # go ahead and setup an initial file so that it can be read during the test
    my $file = temp_file_path();
    File::Slurp::write_file($file, '');

    # step 1 will pass here, but step 2 will fail due to our simulation
    # overriding CORE::syswrite simulates a failure in writing to a file
    my ($res, $warn, $err) = trap_function_override_core('syswrite', \&prepend_file, $file, @{err_mode => 'quiet'@}, '');
    ok(!$warn, 'prepend_file: write: err_mode opt quiet - no warning!');
    ok(!$err, 'prepend_file: write: err_mode opt quiet - no exception!');
    ok(!$res, 'prepend_file: write: err_mode opt quiet - no content!');
    unlink "$file.$$";
    ($res, $warn, $err) = trap_function_override_core('syswrite', \&prepend_file, $file, @{err_mode => 'carp'@}, '');
    like($warn, qr/write_file/, 'prepend_file: write: err_mode opt carp - got warning!');
    ok(!$err, 'prepend_file: write: err_mode opt carp - no exception!');
    ok(!$res, 'prepend_file: write: err_mode opt carp - no content!');
    unlink "$file.$$";
    ($res, $warn, $err) = trap_function_override_core('syswrite', \&prepend_file, $file, @{err_mode => 'croak'@}, '');
    ok(!$warn, 'prepend_file: write: err_mode opt croak - no warning!');
    like($err, qr/write_file/, 'prepend_file: write: err_mode opt croak - got exception!');
    ok(!$res, 'prepend_file: write: err_mode opt croak - no content!');
    unlink "$file.$$";
    # cleanup
    unlink $file;
@}

@end example
@iftex
@smallfonts @rm
@end iftex

@noindent
This chunk is called by @r{<@i{01-error_prepend_file.t---Body--Tests}>}; see its first definition at @ref{01-error-prepend-file-t---Body--Tests}.
@iftex
@textfonts @rm
@end iftex

@c _____________________________________

@node 01-error_prepend_file.t---Step 3 Code,  , 01-error_prepend_file.t---Step 2 Code, 01-error_prepend_file.t Test
@subsubsection 01-error_prepend_file.t---Step 3

@need 400
@anchor{01-error-prepend-file-t---Step-3}
@cdindex @r{<@i{01-error_prepend_file.t---Step 3}>}, definition
@noindent
@r{<@i{01-error_prepend_file.t---Step 3}>} @equiv{}
@example
# step 3: Allow steps 1 and 2 to pass, then rename the new file called "foo.$$"
# to the original "foo". This rename will fail by simulating a problem with
# CORE::GLOBAL::rename
@{
    # go ahead and setup an initial file so that it can be read during the test
    my $file = temp_file_path();
    File::Slurp::write_file($file, '');

    # step 1 will pass here, but step 2 will fail due to our simulation
    # overriding CORE::syswrite simulates a failure in writing to a file
    my ($res, $warn, $err) = trap_function_override_core('rename', \&prepend_file, $file, @{err_mode => 'quiet'@}, '');
    ok(!$warn, 'prepend_file: rename: err_mode opt quiet - no warning!');
    ok(!$err, 'prepend_file: rename: err_mode opt quiet - no exception!');
    ok(!$res, 'prepend_file: rename: err_mode opt quiet - no content!');
    unlink "$file.$$";
    ($res, $warn, $err) = trap_function_override_core('rename', \&prepend_file, $file, @{err_mode => 'carp'@}, '');
    like($warn, qr/write_file/, 'prepend_file: rename: err_mode opt carp - got warning!');
    ok(!$err, 'prepend_file: rename: err_mode opt carp - no exception!');
    ok(!$res, 'prepend_file: rename: err_mode opt carp - no content!');
    unlink "$file.$$";
    ($res, $warn, $err) = trap_function_override_core('rename', \&prepend_file, $file, @{err_mode => 'croak'@}, '');
    ok(!$warn, 'prepend_file: rename: err_mode opt croak - no warning!');
    like($err, qr/write_file/, 'prepend_file: rename: err_mode opt croak - got exception!');
    ok(!$res, 'prepend_file: rename: err_mode opt croak - no content!');
    unlink "$file.$$";
    # cleanup
    unlink $file;
@}

@end example
@iftex
@smallfonts @rm
@end iftex

@noindent
This chunk is called by @r{<@i{01-error_prepend_file.t---Body--Tests}>}; see its first definition at @ref{01-error-prepend-file-t---Body--Tests}.
@iftex
@textfonts @rm
@end iftex


@c .....................................

@node edit_file.t Test,  , 01-error_prepend_file.t Test, About File-Slurp
@subsection @file{edit_file.t} Test
@cindex @file{edit_file.t} test

@need 400
@anchor{edit-file-t}
@crindex @r{<@i{Use Strict Warnings}>}, use
@crindex @r{<@i{Use File-Spec Basename}>}, use
@crindex @r{<@i{Use TWJR Lib}>}, use
@crindex @r{<@i{edit_file.t---Use}>}, use
@crindex @r{<@i{edit_file.t---PRE}>}, use
@crindex @r{<@i{edit_file.t---Body--Test 1}>}, use
@crindex @r{<@i{edit_file.t---Body--Test 2}>}, use
@crindex @r{<@i{edit_file.t---Body--Test 3}>}, use
@crindex @r{<@i{edit_file.t---Body--Test 4}>}, use
@crindex @r{<@i{edit_file.t---Body--Test 5}>}, use
@cdindex @r{@{@file{edit_file.t}@}}, definition
@noindent
@r{@{@file{edit_file.t}@}} @equiv{}
@example
@r{<@i{Use Strict Warnings}>}
@r{<@i{Use File-Spec Basename}>}
@r{<@i{Use TWJR Lib}>}
@r{<@i{edit_file.t---Use}>}

plan tests => 20;

@r{<@i{edit_file.t---PRE}>}

@r{<@i{edit_file.t---Body--Test 1}>}
@r{<@i{edit_file.t---Body--Test 2}>}
@r{<@i{edit_file.t---Body--Test 3}>}
@r{<@i{edit_file.t---Body--Test 4}>}
@r{<@i{edit_file.t---Body--Test 5}>}

@end example
@iftex
@smallfonts @rm
@end iftex

@noindent
The following table lists called chunk definition points.
@multitable @columnfractions .35 .65
@headitem Chunk name @tab First definition point
@item @r{<@i{Use File-Spec Basename}>} @tab See @ref{Use-File-Spec-Basename}.
@item @r{<@i{Use Strict Warnings}>} @tab See @ref{Use-Strict-Warnings}.
@item @r{<@i{Use TWJR Lib}>} @tab See @ref{Use-TWJR-Lib}.
@item @r{<@i{edit_file.t---Body--Test 1}>} @tab See @ref{edit-file-t---Body--Test-1}.
@item @r{<@i{edit_file.t---Body--Test 2}>} @tab See @ref{edit-file-t---Body--Test-2}.
@item @r{<@i{edit_file.t---Body--Test 3}>} @tab See @ref{edit-file-t---Body--Test-3}.
@item @r{<@i{edit_file.t---Body--Test 4}>} @tab See @ref{edit-file-t---Body--Test-4}.
@item @r{<@i{edit_file.t---Body--Test 5}>} @tab See @ref{edit-file-t---Body--Test-5}.
@item @r{<@i{edit_file.t---PRE}>} @tab See @ref{edit-file-t---PRE}.
@item @r{<@i{edit_file.t---Use}>} @tab See @ref{edit-file-t---Use}.
@end multitable
@iftex
@textfonts @rm
@end iftex


@need 400
@anchor{Makefile---Applications--Syntax-Checks-Hook-7}
@cdindex @r{<@i{Makefile---Applications--Syntax Checks-Hook}>}, definition
@noindent
@r{<@i{Makefile---Applications--Syntax Checks-Hook}>} +@equiv{}
@example
    @@printf "$@{PURPLEBOLD@}"; perl -c $@{PWD@}/files/t/edit_file.t; printf "$@{CLEAR@}"
@end example
@iftex
@smallfonts @rm
@end iftex

@noindent
This chunk is also defined in
@ref{Makefile---Applications--Syntax-Checks-Hook-1},
@ref{Makefile---Applications--Syntax-Checks-Hook-2},
@ref{Makefile---Applications--Syntax-Checks-Hook-3},
@ref{Makefile---Applications--Syntax-Checks-Hook-4},
@ref{Makefile---Applications--Syntax-Checks-Hook-5}, and
@ref{Makefile---Applications--Syntax-Checks-Hook-6}.

@noindent
This chunk is called by @r{<@i{Makefile---Applications--Syntax Checks}>}; see its first definition at @ref{Makefile---Applications--Syntax-Checks}.
@iftex
@textfonts @rm
@end iftex

@c _____________________________________

@menu
* edit_file.t---Use::
* edit_file.t---PRE::
* edit_file.t---Body--Test 1::
@end menu

@node edit_file.t---Use, edit_file.t---PRE, edit_file.t Test, edit_file.t Test
@subsubsection edit_file.t---Use

@need 400
@anchor{edit-file-t---Use}
@cdindex @r{<@i{edit_file.t---Use}>}, definition
@noindent
@r{<@i{edit_file.t---Use}>} @equiv{}
@example
use lib File::Spec->catdir(File::Spec->rel2abs(File::Basename::dirname(__FILE__)), 'lib');
use FileSlurpTest qw(temp_file_path trap_function);

use File::Slurp qw(read_file write_file edit_file);
use Test::More;

@end example
@iftex
@smallfonts @rm
@end iftex

@noindent
This chunk is called by @r{@{@file{edit_file.t}@}}; see its first definition at @ref{edit-file-t}.
@iftex
@textfonts @rm
@end iftex

@c _____________________________________

@node edit_file.t---PRE, edit_file.t---Body--Test 1, edit_file.t---Use, edit_file.t Test
@subsubsection edit_file.t---PRE

@need 400
@anchor{edit-file-t---PRE}
@cdindex @r{<@i{edit_file.t---PRE}>}, definition
@noindent
@r{<@i{edit_file.t---PRE}>} @equiv{}
@example
my $file = 'edit_file';
my $existing_data = <<PRE;
Line 1
line 2
more
PRE

@end example
@iftex
@smallfonts @rm
@end iftex

@noindent
This chunk is called by @r{@{@file{edit_file.t}@}}; see its first definition at @ref{edit-file-t}.
@iftex
@textfonts @rm
@end iftex

@c _____________________________________

@node edit_file.t---Body--Test 1,  , edit_file.t---PRE, edit_file.t Test
@subsubsection edit_file.t---Body--Test 1

@heading Test 1

@need 400
@anchor{edit-file-t---Body--Test-1}
@cdindex @r{<@i{edit_file.t---Body--Test 1}>}, definition
@noindent
@r{<@i{edit_file.t---Body--Test 1}>} @equiv{}
@example
@{
    my $file = temp_file_path();
    write_file($file, $existing_data);
    my ($res, $warn, $err) = trap_function(\&edit_file, sub @{s/([0-9])/$@{1@}000/g@}, $file);
    ok($res, 'edit_file: edit line: got response!');
    ok(!$warn, 'edit_file: edit line: no warnings!');
    ok(!$err, 'edit_file: edit line: no exceptions!');
    my $expected = join("\n", ('line 1000', 'line 2000', 'more', ''));
    is(read_file($file), $expected, 'edit_file: edit line: contents are right');
    unlink $file;
@}

@end example
@iftex
@smallfonts @rm
@end iftex

@noindent
This chunk is called by @r{@{@file{edit_file.t}@}}; see its first definition at @ref{edit-file-t}.
@iftex
@textfonts @rm
@end iftex

@heading Test 2

@need 400
@anchor{edit-file-t---Body--Test-2}
@cdindex @r{<@i{edit_file.t---Body--Test 2}>}, definition
@noindent
@r{<@i{edit_file.t---Body--Test 2}>} @equiv{}
@example
@{
    my $file = temp_file_path();
    write_file($file, $existing_data);
    my ($res, $warn, $err) = trap_function(\&edit_file, sub @{s/([0-9])/$@{1@}000/g@}, $file, @{@});
    ok($res, 'edit_file: edit line, empty options hashref: got response!');
    ok(!$warn, 'edit_file: edit line, empty options hashref: no warnings!');
    ok(!$err, 'edit_file: edit line, empty options hashref: no exceptions!');
    my $expected = join("\n", ('line 1000', 'line 2000', 'more', ''));
    is(read_file($file), $expected, 'edit_file: edit line, empty options hashref: contents are right');
    unlink $file;
@}

@end example
@iftex
@smallfonts @rm
@end iftex

@noindent
This chunk is called by @r{@{@file{edit_file.t}@}}; see its first definition at @ref{edit-file-t}.
@iftex
@textfonts @rm
@end iftex

@heading Test 3

@need 400
@anchor{edit-file-t---Body--Test-3}
@cdindex @r{<@i{edit_file.t---Body--Test 3}>}, definition
@noindent
@r{<@i{edit_file.t---Body--Test 3}>} @equiv{}
@example
@{
    my $file = temp_file_path();
    write_file($file, $existing_data);
    my ($res, $warn, $err) = trap_function(\&edit_file, sub @{s/([0-9])/$@{1@}000/g@}, $file, @{foo=>1,bar=>2@});
    ok($res, 'edit_file: edit line, invalid options: got response!');
    ok(!$warn, 'edit_file: edit line, invalid options: no warnings!');
    ok(!$err, 'edit_file: edit line, invalid options: no exceptions!');
    my $expected = join("\n", ('line 1000', 'line 2000', 'more', ''));
    is(read_file($file), $expected, 'edit_file: edit line, invalid options: contents are right');
    unlink $file;
@}

@end example
@iftex
@smallfonts @rm
@end iftex

@noindent
This chunk is called by @r{@{@file{edit_file.t}@}}; see its first definition at @ref{edit-file-t}.
@iftex
@textfonts @rm
@end iftex

@heading Test 4

@need 400
@anchor{edit-file-t---Body--Test-4}
@cdindex @r{<@i{edit_file.t---Body--Test 4}>}, definition
@noindent
@r{<@i{edit_file.t---Body--Test 4}>} @equiv{}
@example
@{
    my $file = temp_file_path();
    write_file($file, $existing_data);
    my ($res, $warn, $err) = trap_function(\&edit_file, sub @{s/([0-9])/$@{1@}000/g@}, $file, @{foo=>1,bar=>2, binmode=>':raw'@});
    ok($res, 'edit_file: edit line, invalid options, binmode: got response!');
    # this should get fixed
    SKIP: @{
        skip "Binmode is bad news bears with sysread on Perl 5.30+", 1;
        ok(!$warn, 'edit_file: edit line, invalid options, binmode: no warnings!');
    @}
    ok(!$err, 'edit_file: edit line, invalid options, binmode: no exceptions!');
    my $expected = join("\n", ('line 1000', 'line 2000', 'more', ''));
    is(read_file($file), $expected, 'edit_file: edit line, invalid options, binmode: contents are right');
    unlink $file;
@}

@end example
@iftex
@smallfonts @rm
@end iftex

@noindent
This chunk is called by @r{@{@file{edit_file.t}@}}; see its first definition at @ref{edit-file-t}.
@iftex
@textfonts @rm
@end iftex

@heading Test 5

@need 400
@anchor{edit-file-t---Body--Test-5}
@cdindex @r{<@i{edit_file.t---Body--Test 5}>}, definition
@noindent
@r{<@i{edit_file.t---Body--Test 5}>} @equiv{}
@example
@{
    my $file = temp_file_path();
    write_file($file, $existing_data);
    my ($res, $warn, $err) = trap_function(\&edit_file, sub @{s/([0-9])/$@{1@}000/g@}, $file, @{foo=>1,bar=>2, err_mode=>'quiet'@});
    ok($res, 'edit_file: edit line, invalid options, err_mode: got response!');
    ok(!$warn, 'edit_file: edit line, invalid options, err_mode: no warnings!');
    ok(!$err, 'edit_file: edit line, invalid options, err_mode: no exceptions!');
    my $expected = join("\n", ('line 1000', 'line 2000', 'more', ''));
    is(read_file($file), $expected, 'edit_file: edit line, invalid options, err_mode: contents are right');
    unlink $file;
@}

@end example
@iftex
@smallfonts @rm
@end iftex

@noindent
This chunk is called by @r{@{@file{edit_file.t}@}}; see its first definition at @ref{edit-file-t}.
@iftex
@textfonts @rm
@end iftex




@c END SECTION: About File::Slurp
@c /////////////////////////////////////////////////////////////////////////////







@c END CHAPTER: About Packages
@c /////////////////////////////////////////////////////////////////////////////


@c END CHAPTERS
@c /////////////////////////////////////////////////////////////////////////////








@c %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
@c BEGIN APPENDICES
@c --The Makefile
@c --Code Chunk Summaries
@c %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%






@c<><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
@part APPENDICES
@c<><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>






@c *****************************************************************************
@c                              THE MAKEFILE

@node The Makefile, Code Chunk Summaries, About Packages, Top
@appendix The Makefile
@cindex makefile

The @file{Makefile} has five initial top-level targets built in as defaults:

@enumerate

@item
Variable Definitions

@itemize
@item
FILE: the name of this source document, without extension
@item
ROOT: the  name of the  root directory, which  defaults to the  present working
directory, $(PWD)
@item
FILES: the  name of  the root directory  for the files  created in  this source
document, which defaults to @file{files}
@item
LODESTONE: a reference file to help @file{Makefile} determine when to recompile
this source document or the @file{TEXI} file
@end itemize

@item
The Default Target: @command{twjr}, described below

@item
The TWJR Targets

@table @command
@item twjrkeep
@command{jrtangle jrweave info pdf html}
@item twjr
@command{twjrkeep dirclean}
@item jrtangle
@command{jrtangle $(FILE).twjr}
@item jrweave
@command{jrweave $(FILE).twjr > $(FILE).texi}
@item dist
@command{jrweave $(FILE).twjr > $(FILE).texi}
@item newmakefile
@command{jrtangle allclean}
@end table

@item
The Clean Targets

@enumerate
@item
Clean
@item
Dirclean
@item
Distclean
@item
Allclean
@end enumerate

@item
The Applications Hook

@end enumerate




@need 400
@anchor{Makefile}
@crindex @r{<@i{Makefile---Variable Definitions}>}, use
@crindex @r{<@i{Makefile---Default Target}>}, use
@crindex @r{<@i{Makefile---TWJR Targets}>}, use
@crindex @r{<@i{Makefile---Clean Targets}>}, use
@crindex @r{<@i{Makefile---Applications}>}, use
@crindex @r{<@i{Makefile---Applications--Syntax Checks}>}, use
@cdindex @r{@{@file{Makefile}@}}, definition
@noindent
@r{@{@file{Makefile}@}} @equiv{}
@example
# MAKEFILE FILE CHUNKS
######################

@r{<@i{Makefile---Variable Definitions}>}
@r{<@i{Makefile---Default Target}>}
@r{<@i{Makefile---TWJR Targets}>}
@r{<@i{Makefile---Clean Targets}>}
@r{<@i{Makefile---Applications}>}
@r{<@i{Makefile---Applications--Syntax Checks}>}

@end example
@iftex
@smallfonts @rm
@end iftex

@noindent
The following table lists called chunk definition points.
@multitable @columnfractions .35 .65
@headitem Chunk name @tab First definition point
@item @r{<@i{Makefile---Applications}>} @tab See @ref{Makefile---Applications}.
@item @r{<@i{Makefile---Applications--Syntax Checks}>} @tab See @ref{Makefile---Applications--Syntax-Checks}.
@item @r{<@i{Makefile---Clean Targets}>} @tab See @ref{Makefile---Clean-Targets}.
@item @r{<@i{Makefile---Default Target}>} @tab See @ref{Makefile---Default-Target}.
@item @r{<@i{Makefile---TWJR Targets}>} @tab See @ref{Makefile---TWJR-Targets-1}.
@item @r{<@i{Makefile---Variable Definitions}>} @tab See @ref{Makefile---Variable-Definitions}.
@end multitable
@iftex
@textfonts @rm
@end iftex




@c -----------------------------------------------------------------------------

@menu
* Makefile Variable Definitions::
* Makefile Default Target::
* Makefile TWJR Targets::
* Makefile Clean Targets::
* Makefile Applications::
* Makefile Syntax Checks::
@end menu

@node Makefile Variable Definitions, Makefile Default Target, The Makefile, The Makefile
@appendixsec Makefile Variable Definitions

The @env{SHELL} variable is included because some shell commands depend upon
Bash version 4, which is not native on my system.

The @env{ROOT} variable is designed to allow you to to extract the source files
(not the @acronym{TEXI}, @acronym{INFO}, @acronym{PDF} or @acronym{HTML} files,
but  the  programs defined  inside  the  @acronym{TWJR}  file) to  a  directory
structure outside of the your  ``present working directory'' (@env{PWD}) should
that be something you want to do, i.e., for production purposes.

The @code{FILE} variable  is the name of this source  @code{TWJR} file, without
extension.

The @code{FILES} variable is the name of  the root directory for the files that
are extracted during the @emph{tangling} phase.  This directory goes underneath
the @file{ROOT} directory.  Feel free to name this whatever you want.

The @code{LODESTONE}  variable is an empty  reference file that is  used solely
for its  modification time  to help  the Makefile  determine when  to recompile
(i.e., @emph{tangle} and @emph{weave}) the  source @file{TWJR} file.  It should
not be changed or otherwise touched (pun intended).

@need 400
@anchor{Makefile---Variable-Definitions}
@cdindex @r{<@i{Makefile---Variable Definitions}>}, definition
@noindent
@r{<@i{Makefile---Variable Definitions}>} @equiv{}
@example
# VARIABLE DEFINITIONS
######################
LODESTONE := .lodestone
README    := README.md
GIT       := .git*

SHELL := $$(which bash)

FILE  := Perl5
ROOT  := $(PWD)
FILES := files

@end example
@iftex
@smallfonts @rm
@end iftex

@noindent
This chunk is called by @r{@{@file{Makefile}@}}; see its first definition at @ref{Makefile}.
@iftex
@textfonts @rm
@end iftex




@c -----------------------------------------------------------------------------

@node Makefile Default Target, Makefile TWJR Targets, Makefile Variable Definitions, The Makefile
@appendixsec Default Target
@cindex default target

The @code{default} target  extracts all source files and moves  them into their
proper  directories,  and  processes  the   @code{TEXI}  source  file  into  an
@code{INFO}  file, a  @code{PDF} document,  and an  @code{HTML} web  site. This
process automatically updates the TEXI's nodes and sectioning commands prior to
generating  the   INFO,  PDF,  and   HTML  documents.    What  used  to   be  a
manually-intensive process is now completely  automated through a Makefile that
is extracted from the @code{TWJR}  source.

This  automated  process  depends   upon  the  programmer's  system  containing
@file{GNU   AWK}  (for   the   primary  literate   programming  operations   of
@emph{tangling}   and   @emph{weaving}@footnote{No  other   implementation   of
@file{AWK}  will  work}),   @file{make}  (to  control  the   build  and  output
processes@footnote{While I haven't tested it, just about any @file{make} should
work}),  @file{Texinfo} of  at least  version 6.5  (for the  processing of  the
@file{TEXI} output file), @file{makeinfo} (to produce the @file{INFO} file from
the @file{TEXI}  file), and @file{Emacs}  (for the automatic updating  of nodes
and sectioning  command@footnote{Again, while I  haven't tested it,  just about
any @file{Emacs}  should work}).   With these  dependencies, everything  can be
compiled with a single call to @command{make} with no argument:

@example
$ make
@end example

Individual files and documents can also be targeted with simple calls such as:

@example
$ make html

$ make openhtml

$ make pdf

$ make openpdf

$make info

$ make openinfo

$ make distclean

$ make allclean
@end example

@noindent and so forth (just name a few).

The target  @code{twjr} is  the default, and  does everything  explicitly.  The
target @code{weave}  (or alternatively @code{texi})  will run just  the command
@command{jrweave}  on the  @file{TWJR} file  to produce  the @file{TEXI}  file,
which  is  directly  responsible  for  producing  the  output  files.   If  the
@file{TWJR}  source  file has  been  modified,  then @command{maked}  will  run
@command{jrtangle} first to update all source documents.

@need 400
@anchor{Makefile---Default-Target}
@cdindex @r{<@i{Makefile---Default Target}>}, definition
@noindent
@r{<@i{Makefile---Default Target}>} @equiv{}
@example
# DEFAULT Target
################
.PHONY : TWJR JRTANGLE TANGLE JRWEAVE WEAVE TEXI INFO PDF HTML
.PHONY : default twjr twjrkeep jrtangle tangle
.PHONY : jrweave weave texi info pdf html newmakefile syntax-checks

default : TWJR

@end example
@iftex
@smallfonts @rm
@end iftex

@noindent
This chunk is called by @r{@{@file{Makefile}@}}; see its first definition at @ref{Makefile}.
@iftex
@textfonts @rm
@end iftex




@c -----------------------------------------------------------------------------


@node Makefile TWJR Targets, Makefile Clean Targets, Makefile Default Target, The Makefile
@appendixsec TWJR Targets
@cindex TWJR targets

These targets are all related to processing the main source @acronym{TWJR} file
in some  way. The @file{make} target  @command{twjr} is the default  target and
runs each of the processes  @command{jrtangle} and @command{jrweave} to produce
source files,  a @acronym{TEXI} file,  an @acronym{INFO} file,  a @acronym{PDF}
document, and an @acronym{HTML} web site.  It only sources what is necessary as
@file{make} is designed to do.  Note that at this time, @emph{weaving} includes
automatic  menu and  node  updating  of the  @acronym{TEXI}  file,  so that  an
@acronym{INFO} file  can also be  generated without needing to  manually update
the  @acronym{TEXI} file  first  as used  to be  the  case. @file{make}  target
@code{info}     runs     @command{makeinfo},     target     @code{pdf}     runs
@command{pdftexi2dvi}, and target @code{html} runs @command{makeinfo --html}.

The default @file{twjr} target deletes all extraneous build and log files prior
to finishing.   If you want  to retain  the build and  log files, then  run the
target @file{twjrkeep} instead.

The  file  @file{.lodestone}   is  used  to  set  a  reference   time  for  the
@acronym{TWJR} file,  so that  if the @acronym{TWJR}  file changes,  new source
documents will be generated; otherwise, it  will simply be left alone. In other
words, if @file{.lodestone}  is older than @file{.twjr},  then @file{.twjr} has
been modified, and it should be @emph{tangled} and @emph{woven} first.  If it is
newer, then @command{make} will not recompile.

Should the @file{Makefile}  portion of the @file{TWJR} be modified,  then it is
important to  obtain a fresh copy  of the @file{Makefile} prior  to running any
target; therefore,  use the target  @command{make newmakefile} first,  then run
any desired target.

@need 400
@anchor{Makefile---TWJR-Targets-1}
@cdindex @r{<@i{Makefile---TWJR Targets}>}, definition
@noindent
@r{<@i{Makefile---TWJR Targets}>} @equiv{}
@example
# TWJR TARGETS
##############

# <------------------------------------->
#               twjrkeep

# Process everything; don't remove any build or log files;

twjrkeep : jrtangle jrweave info pdf html


# <------------------------------------->
#                 TWJR
#                DEFAULT

# Process everything; remove build files and logs.

TWJR : twjr
twjr : twjrkeep dirclean


# <------------------------------------->
#               JRTANGLE

# JRTANGLE depends upon the LODESTONE and the ROOT/FILES directory;
# if either is missing or out of date, then JRTANGLE will be run to
# extract its files.

JRTANGLE : TANGLE
TANGLE   : jrtangle
jrtangle : tangle
tangle   : files $(LODESTONE) syntax-checks

@end example
@iftex
@smallfonts @rm
@end iftex

@noindent
This chunk is also defined in
@ref{Makefile---TWJR-Targets-2}.

@noindent
This chunk is called by @r{@{@file{Makefile}@}}; see its first definition at @ref{Makefile}.
@iftex
@textfonts @rm
@end iftex

@anchor{LODESTONE}
@need 400
@anchor{Makefile---TWJR-Targets-2}
@cdindex @r{<@i{Makefile---TWJR Targets}>}, definition
@noindent
@r{<@i{Makefile---TWJR Targets}>} +@equiv{}
@example
# <------------------------------------->
#               LODESTONE

# Checks the relative time to determine if JRTANGLE should be rerun

$(LODESTONE) : $(FILE).twjr
    @@printf "$@{YELLOW@}Tangling $(FILE)...$@{CLEAR@}\n"
    @@jrtangle $(FILE).twjr
    @@touch $(LODESTONE)
    @@printf "$@{GREEN@}done tangling.$@{CLEAR@}\n"


# <------------------------------------->
#                files

# Checks for  the existence  of the ROOT/FILES  directory; extracts  files into
# them if they don't  exist or are out of date; they must  be retouched if they
# exist but  are out of date  because they will  not be remade or  updated when
# files are extracted into them

files : $(ROOT)/$(FILES)
$(ROOT)/$(FILES) : $(FILE).twjr
    @@printf "$@{YELLOW@}Creating files...$@{CLEAR@}\n"
    @@touch $(FILE).twjr
    @@make $(LODESTONE)
    @@touch $(ROOT)/$(FILES)
    @@printf "$@{GREEN@}done creating files.$@{CLEAR@}\n"


# <------------------------------------->
#              newmakefile

# Extracts the Makefile if necessary by tangling; everything else
# is thereafter deleted

newmakefile : $(LODESTONE) allclean


# <------------------------------------->
#              JRWEAVE

# Extracts the TEXI, and updates the nodes and sections with a batch call to
# Emacs; it depends upon TWJR

JRWEAVE : WEAVE
WEAVE   : TEXI
TEXI    : jrweave
jrweave : weave
weave   : texi
texi    : $(FILE).texi
$(FILE).texi : $(FILE).twjr
    @@printf "$@{YELLOW@}Weaving $(FILE)...$@{CLEAR@}\n"
    @@jrweave $(FILE).twjr > $(FILE).texi
    @@printf "$@{GREEN@}done weaving.$@{CLEAR@}\n";
    @@printf "$@{YELLOW@}updating $(FILE)'s menus and nodes...$@{CLEAR@}\n"
    @@emacs --batch --eval '(progn (find-file "./$(FILE).texi" nil) \
      (texinfo-master-menu 1) (save-buffer 0))' 2> .batch.log
    @@printf "$@{GREEN@}done updating.$@{CLEAR@}\n"

# <------------------------------------->
#                DIST

# Runs jrtangle jrweave distclean; prepares for git commit

DIST : dist
dist : jrtangle jrweave distclean


# <------------------------------------->
#                 INFO
#               OPENINFO

# Runs makeinfo on the TEXI file;
# Opens the INFO file in Emacs

INFO : info
info : $(FILE).info
$(FILE).info : $(FILE).texi
    @@printf "$@{YELLOW@}Creating an INFO file...$@{CLEAR@}\n"
    @@makeinfo $(FILE).texi
    @@printf "$@{GREEN@}done$@{CLEAR@}\n"
openinfo : INFO
    @@printf "$@{YELLOW@}Opening INFO in Emacs...$@{PURPLE@}\n"
    @@emacsclient -s server --eval \
      '(progn \
              (info "$(ROOT)/$(FILE).info") \
          (revert-buffer t t))'
    @@printf "$@{GREEN@}done$@{CLEAR@}\n"


# <------------------------------------->
#                  PDF
#                OPENPDF

# Runs pdftexi2dvi on the TEXI file;
# Opens the PDF file

PDF : pdf
pdf : $(FILE).pdf
$(FILE).pdf : $(FILE).texi
    @@printf "$@{YELLOW@}Creating a PDF file...$@{CLEAR@}\n"
    @@pdftexi2dvi --build=tidy --build-dir=build --quiet $(FILE).texi
    @@printf "$@{GREEN@}done$@{CLEAR@}\n"
openpdf : PDF
    @@printf "$@{YELLOW@}Opening PDF...$@{CLEAR@}\n"
    @@open $(FILE).pdf
    @@printf "$@{GREEN@}done$@{CLEAR@}\n"


# <------------------------------------->
#                 HTML
#               OPENHTML

# Runs makeinfo --html on the TEXI file;
# Opens index.html in a browser

HTML : html
html : $(FILE)/index.html
$(FILE)/index.html : $(FILE).texi
    @@printf "$@{YELLOW@}Creating an HTML directory...$@{CLEAR@}\n"
    @@makeinfo --html $(FILE).texi
    @@printf "$@{GREEN@}done$@{CLEAR@}\n"
openhtml : HTML
    @@printf "$@{YELLOW@}Opening INDEX.HTML in the browser...$@{CLEAR@}\n"
    @@open $(FILE)/index.html
    @@printf "$@{GREEN@}done$@{CLEAR@}\n"

@end example
@iftex
@smallfonts @rm
@end iftex

@noindent
This chunk is also defined in
@ref{Makefile---TWJR-Targets-1}.

@noindent
This chunk is called by @r{@{@file{Makefile}@}}; see its first definition at @ref{Makefile}.
@iftex
@textfonts @rm
@end iftex




@c -----------------------------------------------------------------------------

@node Makefile Clean Targets, Makefile Applications, Makefile TWJR Targets, The Makefile
@appendixsec Makefile Clean Targets
@cindex Makefile clean targets

The @command{clean} target removes  backup files. The @command{dirclean} target
removes build  directories and log  files, but  not source files  (those inside
@file{files} directory,  e.g., @file{bin/} and and  @file{src/}) and associated
files and  programs inside  them.  The  @command{distclean} target  removes the
@acronym{INFO}, @acronym{PDF},  @acronym{HTML}, and @acronym{source}  files and
directories, leaving just  the @file{TWJR} file, the @file{TEXI}  file, and the
@file{Makefile}.  Finally,  the  @command{allclean} target  removes  everything
except the @acronym{TWJR} file and the @file{Makefile}.

@need 400
@anchor{Makefile---Clean-Targets}
@cdindex @r{<@i{Makefile---Clean Targets}>}, definition
@noindent
@r{<@i{Makefile---Clean Targets}>} @equiv{}
@example
# CLEAN TARGETS
################
.PHONY : clean dirclean distclean allclean

# <------------------------------------->
#                clean

# remove backup files

clean :
    @@printf "$@{WHITEBOLD@}Cleaning...$@{CYAN@}\n"
    @@rm -f *~ .*~ #*# #*.*#
    @@printf "$@{GREEN@}done cleaning.$@{CLEAR@}\n"


# <------------------------------------->
#               dirclean

# after clean:  remove all  build and miscellaneous  files, leaving  only TWJR,
# TEXI,  INFO, HTML,  PDF,  Makefile,  README, .git,  .gitignore  & the  source
# documents.

dirclean : clean
    @@printf "$@{WHITEBOLD@}Dir-cleaning...$@{CYAN@}\n"
    @@for file in * .*; do      \
      case $$file in           \
            '.' | '..')          ;;\
        $(FILE)* | Makefile) ;;\
        $(FILES)*)       ;;\
        $(LODESTONE))        ;;\
        $(README))       ;;\
        $(GIT))      ;;\
            *) rm -vfr $$file    ;;\
      esac                     \
    done
    @@printf "$@{GREEN@}done dir-cleaning.$@{CLEAR@}\n"


# <------------------------------------->
#                distclean

# after dirclean: remove INFO, HTML, and PDF, and FILES

distclean : dirclean
    @@printf "$@{WHITEBOLD@}Dist-cleaning...$@{CYAN@}\n"
    @@rm -vfr $(FILE) $(FILE).info $(FILE).pdf $(ROOT)/$(FILES)
    @@printf "$@{GREEN@}done dist-cleaning.$@{CLEAR@}\n"


# <------------------------------------->
#                allclean

# allclean: remove TEXI, leaving only TWJR and Makefile

allclean : distclean
    @@printf "$@{WHITEBOLD@}Cleaning all...$@{CYAN@}\n"
    @@rm -vfr $(FILE).texi
    @@printf "$@{GREEN@}done cleaning all.$@{CLEAR@}\n"

@end example
@iftex
@smallfonts @rm
@end iftex

@noindent
This chunk is called by @r{@{@file{Makefile}@}}; see its first definition at @ref{Makefile}.
@iftex
@textfonts @rm
@end iftex




@c -----------------------------------------------------------------------------

@node Makefile Applications, Makefile Syntax Checks, Makefile Clean Targets, The Makefile
@appendixsec Makefile Applications
@cindex Makefile applications

Place any targets for running  code-specific commands here, such as executables
in the @file{bin/} directory.  The file @verb{|@<Makefile---Applicaionts@>|} is
a hook  that can  be used in  another part  of the source  document; this  is a
fundamental feature of literate programming.

@need 400
@anchor{Makefile---Applications}
@crindex @r{<@i{Makefile---Applications--Hook}>}, use
@cdindex @r{<@i{Makefile---Applications}>}, definition
@noindent
@r{<@i{Makefile---Applications}>} @equiv{}
@example
# APPLICATION TARGETS
######################

@r{<@i{Makefile---Applications--Hook}>}

@end example
@iftex
@smallfonts @rm
@end iftex

@noindent
This chunk is called by @r{@{@file{Makefile}@}}; see its first definition at @ref{Makefile}.

@noindent
The called chunk @r{<@i{Makefile---Applications--Hook}>} is first defined at
@ref{Makefile---Applications--Hook}.
@iftex
@textfonts @rm
@end iftex




@c -----------------------------------------------------------------------------

@node Makefile Syntax Checks,  , Makefile Applications, The Makefile
@appendixsec Makefile Syntax Checks
@cindex Makefile syntax checks

@need 400
@anchor{Makefile---Applications--Syntax-Checks}
@crindex @r{<@i{Makefile---Applications--Syntax Checks-Hook}>}, use
@cdindex @r{<@i{Makefile---Applications--Syntax Checks}>}, definition
@noindent
@r{<@i{Makefile---Applications--Syntax Checks}>} @equiv{}
@example
# APPLICATION SYNTAX CHECKS
###########################


syntax-checks :
    @@printf "$@{YELLOW@}checking syntax of installed Perl files...$@{PURPLEBOLD@}\n";
@r{<@i{Makefile---Applications--Syntax Checks-Hook}>}
@end example
@iftex
@smallfonts @rm
@end iftex

@noindent
This chunk is called by @r{@{@file{Makefile}@}}; see its first definition at @ref{Makefile}.

@noindent
The called chunk @r{<@i{Makefile---Applications--Syntax Checks-Hook}>} is first defined at
@ref{Makefile---Applications--Syntax-Checks-Hook-1}.
@iftex
@textfonts @rm
@end iftex




@c END The Makefile
@c /////////////////////////////////////////////////////////////////////////////








@c *****************************************************************************
@c                        CODE CHUNK SUMMARIES

@node Code Chunk Summaries, Bibliography, The Makefile, Top
@appendix Code Chunk Summaries

This @value{APPENDIX} presents alphabetical lists of
all the file definitions, the code chunk definitions,
and the code chunk references.

@menu
* File Definitions::            Source files by definition.
* Code Chunk Definitions::      Code chunks by definition.
* Code Chunk References::       Code chunks by reference.
@end menu




@c -----------------------------------------------------------------------------
@node File Definitions, Code Chunk Definitions, Code Chunk Summaries, Code Chunk Summaries
@appendixsec Source File Definitions

@table @asis
@item @r{@{@file{00-report-prereqs.dd}@}}
This chunk is defined in
@ref{00-report-prereqs-dd}.
@item @r{@{@file{00-report-prereqs.t}@}}
This chunk is defined in
@ref{00-report-prereqs-t}.
@item @r{@{@file{01-error_edit_file.t}@}}
This chunk is defined in
@ref{01-error-edit-file-t}.
@item @r{@{@file{01-error_edit_file_lines.t}@}}
This chunk is defined in
@ref{01-error-edit-file-lines-t}.
@item @r{@{@file{01-error_prepend_file.t}@}}
This chunk is defined in
@ref{01-error-prepend-file-t}.
@item @r{@{@file{FileSlurpTest.pm}@}}
This chunk is defined in
@ref{FileSlurpTest-pm}.
@item @r{@{@file{FileSlurpTestOverride.pm}@}}
This chunk is defined in
@ref{FileSlurpTestOverride-pm}.
@item @r{@{@file{Makefile}@}}
This chunk is defined in
@ref{Makefile}.
@item @r{@{@file{README.md}@}}
This chunk is defined in
@ref{README-md}.
@item @r{@{@file{Slurp.pm}@}}
This chunk is defined in
@ref{Slurp-pm}.
@item @r{@{@file{edit_file.t}@}}
This chunk is defined in
@ref{edit-file-t}.
@item @r{@{@file{perlbrew-install.pl}@}}
This chunk is defined in
@ref{perlbrew-install-pl}.
@end table




@c -----------------------------------------------------------------------------
@node Code Chunk Definitions, Code Chunk References, File Definitions, Code Chunk Summaries
@appendixsec Code Chunk Definitions

@table @asis
@item @r{<@i{00-report-prereqs.dd--Body}>}
This chunk is defined in
@ref{00-report-prereqs-dd--Body}.
@item @r{<@i{00-report-prereqs.t---Body}>}
This chunk is defined in
@ref{00-report-prereqs-t---Body}.
@item @r{<@i{01-error_edit_file.t---Body}>}
This chunk is defined in
@ref{01-error-edit-file-t---Body}.
@item @r{<@i{01-error_edit_file.t---Body--# of Error}>}
This chunk is defined in
@ref{01-error-edit-file-t---Body----of-Error}.
@item @r{<@i{01-error_edit_file.t---Body--Edit File Error}>}
This chunk is defined in
@ref{01-error-edit-file-t---Body--Edit-File-Error}.
@item @r{<@i{01-error_edit_file.t---Body--Plan Tests}>}
This chunk is defined in
@ref{01-error-edit-file-t---Body--Plan-Tests}.
@item @r{<@i{01-error_edit_file.t---Body--Use}>}
This chunk is defined in
@ref{01-error-edit-file-t---Body--Use}.
@item @r{<@i{01-error_prepend_file.t---Body}>}
This chunk is defined in
@ref{01-error-prepend-file-t---Body}.
@item @r{<@i{01-error_prepend_file.t---Body--Test-More}>}
This chunk is defined in
@ref{01-error-prepend-file-t---Body--Test-More}.
@item @r{<@i{01-error_prepend_file.t---Body--Tests}>}
This chunk is defined in
@ref{01-error-prepend-file-t---Body--Tests}.
@item @r{<@i{01-error_prepend_file.t---Body--Use}>}
This chunk is defined in
@ref{01-error-prepend-file-t---Body--Use}.
@item @r{<@i{01-error_prepend_file.t---Body--Warnings Off}>}
This chunk is defined in
@ref{01-error-prepend-file-t---Body--Warnings-Off}.
@item @r{<@i{01-error_prepend_file.t---Step 1}>}
This chunk is defined in
@ref{01-error-prepend-file-t---Step-1}.
@item @r{<@i{01-error_prepend_file.t---Step 2}>}
This chunk is defined in
@ref{01-error-prepend-file-t---Step-2}.
@item @r{<@i{01-error_prepend_file.t---Step 3}>}
This chunk is defined in
@ref{01-error-prepend-file-t---Step-3}.
@item @r{<@i{Makefile---Applications}>}
This chunk is defined in
@ref{Makefile---Applications}.
@item @r{<@i{Makefile---Applications--Hook}>}
This chunk is defined in
@ref{Makefile---Applications--Hook}.
@item @r{<@i{Makefile---Applications--Syntax Checks}>}
This chunk is defined in
@ref{Makefile---Applications--Syntax-Checks}.
@item @r{<@i{Makefile---Applications--Syntax Checks-Hook}>}
Multiple definitions occur in
@ref{Makefile---Applications--Syntax-Checks-Hook-1},
@ref{Makefile---Applications--Syntax-Checks-Hook-2},
@ref{Makefile---Applications--Syntax-Checks-Hook-3},
@ref{Makefile---Applications--Syntax-Checks-Hook-4},
@ref{Makefile---Applications--Syntax-Checks-Hook-5},
@ref{Makefile---Applications--Syntax-Checks-Hook-6},
and
@ref{Makefile---Applications--Syntax-Checks-Hook-7}.

@item @r{<@i{Makefile---Clean Targets}>}
This chunk is defined in
@ref{Makefile---Clean-Targets}.
@item @r{<@i{Makefile---Default Target}>}
This chunk is defined in
@ref{Makefile---Default-Target}.
@item @r{<@i{Makefile---TWJR Targets}>}
Multiple definitions occur in
@ref{Makefile---TWJR-Targets-1},
and
@ref{Makefile---TWJR-Targets-2}.

@item @r{<@i{Makefile---Variable Definitions}>}
This chunk is defined in
@ref{Makefile---Variable-Definitions}.
@item @r{<@i{Package---File--Slurp-Code}>}
This chunk is defined in
@ref{Package---File--Slurp-Code}.
@item @r{<@i{Package---File--Slurp-Perldoc}>}
This chunk is defined in
@ref{Package---File--Slurp-Perldoc}.
@item @r{<@i{Test---FileSlurp--FileSlurpTest}>}
This chunk is defined in
@ref{Test---FileSlurp--FileSlurpTest}.
@item @r{<@i{Use File-Spec Basename}>}
This chunk is defined in
@ref{Use-File-Spec-Basename}.
@item @r{<@i{Use Strict Warnings}>}
This chunk is defined in
@ref{Use-Strict-Warnings}.
@item @r{<@i{Use TWJR Lib}>}
This chunk is defined in
@ref{Use-TWJR-Lib}.
@item @r{<@i{edit_file.t---Body--Test 1}>}
This chunk is defined in
@ref{edit-file-t---Body--Test-1}.
@item @r{<@i{edit_file.t---Body--Test 2}>}
This chunk is defined in
@ref{edit-file-t---Body--Test-2}.
@item @r{<@i{edit_file.t---Body--Test 3}>}
This chunk is defined in
@ref{edit-file-t---Body--Test-3}.
@item @r{<@i{edit_file.t---Body--Test 4}>}
This chunk is defined in
@ref{edit-file-t---Body--Test-4}.
@item @r{<@i{edit_file.t---Body--Test 5}>}
This chunk is defined in
@ref{edit-file-t---Body--Test-5}.
@item @r{<@i{edit_file.t---PRE}>}
This chunk is defined in
@ref{edit-file-t---PRE}.
@item @r{<@i{edit_file.t---Use}>}
This chunk is defined in
@ref{edit-file-t---Use}.
@end table




@c -----------------------------------------------------------------------------
@node Code Chunk References,  , Code Chunk Definitions, Code Chunk Summaries
@appendixsec Code Chunk References

@table @asis
@item @r{<@i{00-report-prereqs.dd--Body}>}

@noindent
This chunk is called by @r{@{@file{00-report-prereqs.dd}@}}; see its first definition at @ref{00-report-prereqs-dd}.
@item @r{<@i{00-report-prereqs.t---Body}>}

@noindent
This chunk is called by @r{@{@file{00-report-prereqs.t}@}}; see its first definition at @ref{00-report-prereqs-t}.
@item @r{<@i{01-error_edit_file.t---Body}>}

@noindent
This chunk is called by @r{@{@file{01-error_edit_file.t}@}}; see its first definition at @ref{01-error-edit-file-t}.
@item @r{<@i{01-error_edit_file.t---Body--# of Error}>}

@noindent
This chunk is called by the following chunks:

@multitable @columnfractions .35 .65
@headitem Chunk name @tab First definition point
@item @r{<@i{01-error_edit_file.t---Body}>} @tab See @ref{01-error-edit-file-t---Body}.
@item @r{@{@file{01-error_edit_file_lines.t}@}} @tab See @ref{01-error-edit-file-lines-t}.
@end multitable
@item @r{<@i{01-error_edit_file.t---Body--Edit File Error}>}

@noindent
This chunk is called by the following chunks:

@multitable @columnfractions .35 .65
@headitem Chunk name @tab First definition point
@item @r{<@i{01-error_edit_file.t---Body}>} @tab See @ref{01-error-edit-file-t---Body}.
@item @r{@{@file{01-error_edit_file_lines.t}@}} @tab See @ref{01-error-edit-file-lines-t}.
@end multitable
@item @r{<@i{01-error_edit_file.t---Body--Plan Tests}>}

@noindent
This chunk is called by the following chunks:

@multitable @columnfractions .35 .65
@headitem Chunk name @tab First definition point
@item @r{<@i{01-error_edit_file.t---Body}>} @tab See @ref{01-error-edit-file-t---Body}.
@item @r{@{@file{01-error_edit_file_lines.t}@}} @tab See @ref{01-error-edit-file-lines-t}.
@end multitable
@item @r{<@i{01-error_edit_file.t---Body--Use}>}

@noindent
This chunk is called by the following chunks:

@multitable @columnfractions .35 .65
@headitem Chunk name @tab First definition point
@item @r{<@i{01-error_edit_file.t---Body}>} @tab See @ref{01-error-edit-file-t---Body}.
@item @r{@{@file{01-error_edit_file_lines.t}@}} @tab See @ref{01-error-edit-file-lines-t}.
@end multitable
@item @r{<@i{01-error_prepend_file.t---Body}>}

@noindent
This chunk is called by @r{@{@file{01-error_prepend_file.t}@}}; see its first definition at @ref{01-error-prepend-file-t}.
@item @r{<@i{01-error_prepend_file.t---Body--Test-More}>}

@noindent
This chunk is called by @r{<@i{01-error_prepend_file.t---Body}>}; see its first definition at @ref{01-error-prepend-file-t---Body}.
@item @r{<@i{01-error_prepend_file.t---Body--Tests}>}

@noindent
This chunk is called by @r{<@i{01-error_prepend_file.t---Body}>}; see its first definition at @ref{01-error-prepend-file-t---Body}.
@item @r{<@i{01-error_prepend_file.t---Body--Use}>}

@noindent
This chunk is called by @r{<@i{01-error_prepend_file.t---Body}>}; see its first definition at @ref{01-error-prepend-file-t---Body}.
@item @r{<@i{01-error_prepend_file.t---Body--Warnings Off}>}

@noindent
This chunk is called by @r{<@i{01-error_prepend_file.t---Body}>}; see its first definition at @ref{01-error-prepend-file-t---Body}.
@item @r{<@i{01-error_prepend_file.t---Step 1}>}

@noindent
This chunk is called by @r{<@i{01-error_prepend_file.t---Body--Tests}>}; see its first definition at @ref{01-error-prepend-file-t---Body--Tests}.
@item @r{<@i{01-error_prepend_file.t---Step 2}>}

@noindent
This chunk is called by @r{<@i{01-error_prepend_file.t---Body--Tests}>}; see its first definition at @ref{01-error-prepend-file-t---Body--Tests}.
@item @r{<@i{01-error_prepend_file.t---Step 3}>}

@noindent
This chunk is called by @r{<@i{01-error_prepend_file.t---Body--Tests}>}; see its first definition at @ref{01-error-prepend-file-t---Body--Tests}.
@item @r{<@i{Makefile---Applications}>}

@noindent
This chunk is called by @r{@{@file{Makefile}@}}; see its first definition at @ref{Makefile}.
@item @r{<@i{Makefile---Applications--Hook}>}

@noindent
This chunk is called by @r{<@i{Makefile---Applications}>}; see its first definition at @ref{Makefile---Applications}.
@item @r{<@i{Makefile---Applications--Syntax Checks}>}

@noindent
This chunk is called by @r{@{@file{Makefile}@}}; see its first definition at @ref{Makefile}.
@item @r{<@i{Makefile---Applications--Syntax Checks-Hook}>}

@noindent
This chunk is called by @r{<@i{Makefile---Applications--Syntax Checks}>}; see its first definition at @ref{Makefile---Applications--Syntax-Checks}.
@item @r{<@i{Makefile---Clean Targets}>}

@noindent
This chunk is called by @r{@{@file{Makefile}@}}; see its first definition at @ref{Makefile}.
@item @r{<@i{Makefile---Default Target}>}

@noindent
This chunk is called by @r{@{@file{Makefile}@}}; see its first definition at @ref{Makefile}.
@item @r{<@i{Makefile---TWJR Targets}>}

@noindent
This chunk is called by @r{@{@file{Makefile}@}}; see its first definition at @ref{Makefile}.
@item @r{<@i{Makefile---Variable Definitions}>}

@noindent
This chunk is called by @r{@{@file{Makefile}@}}; see its first definition at @ref{Makefile}.
@item @r{<@i{Package---File--Slurp-Code}>}

@noindent
This chunk is called by @r{@{@file{Slurp.pm}@}}; see its first definition at @ref{Slurp-pm}.
@item @r{<@i{Package---File--Slurp-Perldoc}>}

@noindent
This chunk is called by @r{@{@file{Slurp.pm}@}}; see its first definition at @ref{Slurp-pm}.
@item @r{<@i{Test---FileSlurp--FileSlurpTest}>}

@noindent
This chunk is called by @r{@{@file{FileSlurpTest.pm}@}}; see its first definition at @ref{FileSlurpTest-pm}.
@item @r{<@i{Use File-Spec Basename}>}

@noindent
This chunk is called by the following chunks:

@multitable @columnfractions .35 .65
@headitem Chunk name @tab First definition point
@item @r{@{@file{01-error_edit_file.t}@}} @tab See @ref{01-error-edit-file-t}.
@item @r{@{@file{01-error_edit_file_lines.t}@}} @tab See @ref{01-error-edit-file-lines-t}.
@item @r{@{@file{01-error_prepend_file.t}@}} @tab See @ref{01-error-prepend-file-t}.
@item @r{@{@file{FileSlurpTest.pm}@}} @tab See @ref{FileSlurpTest-pm}.
@item @r{@{@file{Slurp.pm}@}} @tab See @ref{Slurp-pm}.
@item @r{@{@file{edit_file.t}@}} @tab See @ref{edit-file-t}.
@end multitable
@item @r{<@i{Use Strict Warnings}>}

@noindent
This chunk is called by the following chunks:

@multitable @columnfractions .35 .65
@headitem Chunk name @tab First definition point
@item @r{<@i{00-report-prereqs.t---Body}>} @tab See @ref{00-report-prereqs-t---Body}.
@item @r{@{@file{01-error_edit_file.t}@}} @tab See @ref{01-error-edit-file-t}.
@item @r{@{@file{01-error_edit_file_lines.t}@}} @tab See @ref{01-error-edit-file-lines-t}.
@item @r{@{@file{01-error_prepend_file.t}@}} @tab See @ref{01-error-prepend-file-t}.
@item @r{<@i{Package---File--Slurp-Code}>} @tab See @ref{Package---File--Slurp-Code}.
@item @r{<@i{Test---FileSlurp--FileSlurpTest}>} @tab See @ref{Test---FileSlurp--FileSlurpTest}.
@item @r{@{@file{edit_file.t}@}} @tab See @ref{edit-file-t}.
@end multitable
@item @r{<@i{Use TWJR Lib}>}

@noindent
This chunk is called by the following chunks:

@multitable @columnfractions .35 .65
@headitem Chunk name @tab First definition point
@item @r{@{@file{01-error_edit_file.t}@}} @tab See @ref{01-error-edit-file-t}.
@item @r{@{@file{01-error_edit_file_lines.t}@}} @tab See @ref{01-error-edit-file-lines-t}.
@item @r{@{@file{01-error_prepend_file.t}@}} @tab See @ref{01-error-prepend-file-t}.
@item @r{@{@file{FileSlurpTest.pm}@}} @tab See @ref{FileSlurpTest-pm}.
@item @r{@{@file{Slurp.pm}@}} @tab See @ref{Slurp-pm}.
@item @r{@{@file{edit_file.t}@}} @tab See @ref{edit-file-t}.
@end multitable
@item @r{<@i{edit_file.t---Body--Test 1}>}

@noindent
This chunk is called by @r{@{@file{edit_file.t}@}}; see its first definition at @ref{edit-file-t}.
@item @r{<@i{edit_file.t---Body--Test 2}>}

@noindent
This chunk is called by @r{@{@file{edit_file.t}@}}; see its first definition at @ref{edit-file-t}.
@item @r{<@i{edit_file.t---Body--Test 3}>}

@noindent
This chunk is called by @r{@{@file{edit_file.t}@}}; see its first definition at @ref{edit-file-t}.
@item @r{<@i{edit_file.t---Body--Test 4}>}

@noindent
This chunk is called by @r{@{@file{edit_file.t}@}}; see its first definition at @ref{edit-file-t}.
@item @r{<@i{edit_file.t---Body--Test 5}>}

@noindent
This chunk is called by @r{@{@file{edit_file.t}@}}; see its first definition at @ref{edit-file-t}.
@item @r{<@i{edit_file.t---PRE}>}

@noindent
This chunk is called by @r{@{@file{edit_file.t}@}}; see its first definition at @ref{edit-file-t}.
@item @r{<@i{edit_file.t---Use}>}

@noindent
This chunk is called by @r{@{@file{edit_file.t}@}}; see its first definition at @ref{edit-file-t}.
@end table


@c END Code Chunk Summaries
@c /////////////////////////////////////////////////////////////////////////////








@c <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
@part Back Matter
@c <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>








@c *****************************************************************************
@c                                BIBLIOGRAPHY

@node Bibliography, List of Tables, Code Chunk Summaries, Top
@unnumbered Bibliography

@c @table @asis

@c @mybibitem{LitProg:Home}
@c "On Misreadings", email, January 2009 @url{http://www.literateprogramming.com/}

@c @mybibitem{LitProg:Knuth}
@c @url{``Literate Programming (1984)'' in Literate Programming. CSLI, 1992, pg.
@c 99.}

@c @mybibitem{LitProg:Ramsey}
@c @url{ahttps://www.cs.tufts.edu/~nr/noweb/}

@c @end table


@c END Bibliography
@c /////////////////////////////////////////////////////////////////////////////








@c *****************************************************************************
@c                             LIST OF TABLES

@node List of Tables, Concept Index, Bibliography, Top
@unnumbered List of Tables

@listoffloats Table







@c END Lists
@c /////////////////////////////////////////////////////////////////////////////








@c  *****************************************************************************
@c                               CONCEPT INDEX


@node Concept Index,  , List of Tables, Top
@unnumbered Index

@printindex cp


@c END Indices
@c /////////////////////////////////////////////////////////////////////////////








@bye

TODO:
